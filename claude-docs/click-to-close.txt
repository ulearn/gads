Project Overview: Hubspot & Google Ads | MQL & SQL Pipeline & Conversion Analysis

GOALS
1) Create a clear "Click to Close" measurement system - DONE
2) Return & observe Pipeline Stage Probabilities (Stage Loss & Completion Probability) - DONE
3) Return & observe average spend over date range - DONE
4) Get clear attribution data for all SQLs - DONE
5) Send Conversion Values & Conversion Adjustments to Google Ads via their API  - DONE

6) Get Claude Ai Desktop directly connect to Google Ads via API to start Ai analysis
NOTES:

We now have the above component parts functioning (points 1-5 above). 

Detail...

CONVERSIONS
"Submit Lead Form" 
* Goal Type: Submit Lead Form (Web Conversion) 
* CTA - Webform Submission
* Currently Primary with a value of €22.40
* Graduated shift to lower value and then Secondary

"ECL-UT"
* Goal Type: Contact
* Type: Secondary 
* Value = 0

"ECL - SQL" 
* Goal Type: Qualified Lead 
* Type: Primary
* Value = dynamically set (by pipeline stage/€amount)

"ECL - WON"
* Goal Type: Converted Lead 
* Type: Primary
* Value = Dynamically set (by €amount)

REPORTING
* MySql DB synced to HubSpot & Google Ads 
* Dashboards
   * Main: https://hub.ulearnschool.com/gads/dashboard
   * Pipeline: https://hub.ulearnschool.com/gads/scripts/analytics/pipeline-analysis.html
   * BurnRate: https://hub.ulearnschool.com/gads/scripts/analytics/burn-rate.html

===================================================

Connecting Ai to Google Ads 
We now need to move on to "plugging Claude in" to Google Ads API so you can bring analysis to 

Audience Manager:
* Your data segments
* Audiences
* Custom Segments
* Combined Segments
* Your data insights
* Your data sources 
* Settings 

NOTE: We are targeting students in our target countries. Normally they are 18-35 from affluent locations (cities/towns/neighbourhoods), high income families, high education families interested in studying English in Dublin/Ireland. We are seeking "in market" leads who are specifically looking to travel to Dublin to study English. 

We are not really interested in general tourism to Ireland. We are not trying to drive "brand awareness" per se - we are trying to target people who are already pretty far down the decision tree:
1) They want to travel abroad
2) They want/need to study English (for career/further studies/personal growth)
3) They want to go to Ireland (and even more specifically Dublin but being the Capital most will choose that location) and not the UK or Canada or Australia or USA or any other native English speaking country - they have definitively chosen Ireland already 
4) If they are non-EU (especially LATAM) they are likely to be interested in our Work&Study Programme which allows them work part/full time during their stay
5) They have often (but not always) been or will be searching for and visited competitor schools (delfinschool.ie, Atlas Language School, ISI, SEDA, ELI, CES and so on - we have lists of EEI schools & their domains as reference)

We can also you Customer Lists - ULearn is 40 years old but we have customer lists going back nearly 2 decades so plenty of customer data available some of which is already uploaded to Google Ads 

Campaign Settings:
* Optimization Score 
* Budget
* Customer Acquisition
* Bid Strategy 
* Campaign Type
* Ad Rotation
* Languages (Important! - English language school targeting non-English speakers) 
* Locations (Important!)
* Targeting Method (Important!- usually "people in targeted locations")
* Targeting Settings (Important! Observation Vs Targeting)
* Asset Optimization 
* Tracking Template (already set up IMO)

Ad Group Settings:
* Default max. CPC
* Max CPM 
* Target CPA 
* Target CPV
* Target CPM
* Target ROAS (Now that we have actual sales values I believe we will be using tROAS)
* Desktop Bid Adjust
* Mobile Bid Adjust 
* Tablet Bid Adjust 
* Display Network custom bid type (usually "none" - honestly no idea)
* Ad Rotation 
* Location Targeting (should following the Campaign I suppose)
* Settings for AI Max 
* Targeting Settings
   * Placements
   * Topics
   * Audience Segments
   * Genders
   * Ages 
   * Parental Status
   * Household Incomes
* Tracking Template (should follow Campaign I suppose) 

ASSET GROUPS
* Headlines
* Long Headlines
* Descriptions
* Call-to-Action
* Business Name: "ULearn English School"
* Images (we upload but would be good to get insight on how each performs - discard/replace poor performing images etc) 
* Logos
* Videos (as images- performance insights would be useful if they can be gleaned)
* Audience Signal (I see one here says "Students F" - no idea what this does)

KEYWORDS
* Keyword
* Match Type (Exact/Phrase/Broad) - needs review to align with campaign/bidding etc
* Max CPC / CPM / CPV
* Negative Keywords (we have a long list already - we add to them as required)
* Search Themes
* Brand List 
* Negative Brand List 
* Locations & Locations Negative (again should align with Campaign settings I suppose) 
* Placements & Placements negative
* Negative Placement Lists
* Mobile App Categories & Negatives
* YouTube Videos  & Negatives
* YouTube Channels & Negatives
* Topics & Topics Negatives
* Audience Segments & Negatives
* Genders
* Ages
* Parental Status
* Household Income 

Ads
* Responsive Search 
* Expanded text ads
* Text ads
* Expanded dynamic search ads
* Dynamic search ads 
* Product Ads
* Image Ads 
* App install
* Image App Install
* Video 
* Skippable Instream 
* In-feed video
* Bumper 
* non-skippable in-stream
* Responsive video 
* Masthead Ads
* Audio
* Responsive display
* Responsive
* Display 
* Gmail multi-product template
* App ads for installs
* Demand Gen
   * Image
   * Carousel
   * Prodcut
   * Video

Experiments
* Performance Max experiments (0) - not sure but curious what this is

Ad Assets 
* Sitelinks 
* Callouts
* Structured snippets
* Images
* Business Logos
* Business Names
* Call assets 
* Lead forms
* Locations
* Price Assets
* App Assets
* Promotions
* Hotel callouts (N/A I guess) 

Recommendations
Tons of subcategory items (which we will see as we connect the API) but the main categories are:
* Summary 
* Auto-Apply
* Repairs
* Bidding & Budgets
* Keywords & Targeting
* Ads & Assets 
* Automated Campaigns
* Try new Google Ads mobile app
* Other

Shared Library 
* Audeineces
* Negative keywords
* negative placemnts
* Brand list
* Shared budgets
* Location groups
* Conversion goals
* Labels
* Asset Library

Advanced Tools 
* other items

=========================================================

eg: When a Deal moves from Sequenced to Engaging a weighted signal (Average Spend X Stage Completion Probability) is sent via API in respect of that GCLID. 

1️⃣ Pre Rollout Estimates 
Estimated Average Deal Size =    €1,200
Value = Deal Size × Probability of Closing            

SAMPLE PROBABILITIES & GOOGLE CONVERSION VALUES             
Stage    Probability    Google Conversion Value    When to Send/Adjust in Ads
SQL (Inbox)    10%    €120    Initial import when vetted
Engaging    25%    €300    Triggered on first open/click
Responsive    50%    €600    Big jump — send adjustment ASAP
Advising    60%    €720    Optional mid-stage update
Negotiation    75%    €900    Optional
Contact (Deposit/Quote accepted)    90%    €1,080    Major update
Won    100%    €1,200    Final update

ENVIRONMENT: Shared VPS (no root & no sudo) | NodeJS environments on Phusion Passenger | Extensive use of HubSpot & Google Ads APIs | Local MySql storage of both HubSpot & Google Ads data | REACT used for dashboard displays

READ ONLY!!! DO NOT WRITE TO THE GITHUB REPO!!
Read Only GitHub Repo: https://github.com/ulearn/gads
- You will only review the branch "claude"
- During testing & patching you will output all code updates only to the Artifacts
- You can view the Repo as required - DO NOT COMMIT OR EDIT THE GITHUB REPOSITORY unless explicitly instructed to do so
- Never access the master branch - only the claude branch 
- AND TO BE EXPLICIT - NEVER OVERWRITE OR PUSH CHANGE TO MASTER (again unless there's some VERY UNUSUAL SITUATION and I explicitly tell you to do so)


INDEX & .ENV VARIABLES
Index: /home/hub/public_html/gads/index.js
- Stores routes/endpoints/authorization
- No business logic in the index!! 
- All business logic is stored in the script files stored in: /home/hub/public_html/gads/scripts/

.env FILE: /home/hub/public_html/gads/.env

MySql Database
See Schema: hub-gads-structure_09.08.2025.sql

APIs & MySql
Although API access to both platforms is extensive Reporting over flexible date ranges proved slow & inefficient. A decision was reached to create a local MySql database (hub_gads) with its schema echoing HubSpot CRM data objects and fields, with nearly all Contacts and Deals fields synced to hub_contacts and hub_deals. Tables were likewise created to store the significant historical Google Ads API data (nearly 20 years with data from 2015 currently in MySql storage)  

Business Logic 
Project is assembled by platform and function in /home/hub/public_html/gads/scripts subfolders (see architecture). I'll outline some of the key files here.

//============ HUBSPOT =================//
/home/hub/public_html/gads/scripts/hubspot/hubspot-sync.js: 
* Pulls HubSpot data. We experimented with models to map the HubSpot fields to MySql but it proved ineffective and instead devised a system to dynamically create any populated fields that was missing in the respective MySql table. 
* We ran into row size limits and did everything possible to change VARCHAR fields to TEXT but even then the limits of MySql caused some issues which meant that not every single HubSpot field (350-400) is mapped but most ~95% are.
* Now captures the association data between contacts and deals using Associations API v4

/home/hub/public_html/gads/scripts/hubspot/fieldmap.js: Utility file that helps create MySql fields for hubspot-sync.js
 * Dynamic Field Mapping Module - Production Version
 * Creates every HubSpot field in MySQL with exact field names
 * Minimal logging for production use

//============ GOOGLE ADS =================//
/home/hub/public_html/gads/scripts/google/gads-sync.js: 
* Pulls Google Ads API data to MySql. As above this is mostly done. It will fire frequently ongoing via cron or similar to bring in new data.

/home/hub/public_html/gads/scripts/google/campaign.js
*  * Handles all Google Ads campaign types with adaptive queries:
 * - Performance Max: Basic data only (limited API access)
 * - Search: Full targeting, keywords, demographics
 * - Display: Targeting and audience data
 * - Video: YouTube targeting
 * - Shopping: Product targeting

//============ ANALYTICS =================//
Where the magic starts to happen. The goals of the project are to merge the 2 separate environments of Google Ads (where prospective audiences become MQLs by clicking an Ad) and HubSpot where MQL's can become SQLs if they pass initial validation based on whether their nationality is Sales Accepted or and Unsupported Territory. Unsupported Territory MQLs are immediately filtered and no Deal is ever created for them in HubSpot. (NOTE: The MQLs that are lost prior to ever enter the SQL Pipeline are referred to here collectively as "Burn Rate" & explored in more detail in /home/hub/public_html/gads/scripts/analytics/burn-rate.html)

/home/hub/public_html/gads/scripts/analytics/dashboard-server.js:  Dashboard Server - HTML Template & React Setup

/home/hub/public_html/gads/scripts/analytics/dashboard.js
- Google Ads Dashboard - Real HubSpot Data from MySQL
 * UPDATED: Now displays Campaign ID, Campaign Name, and AdGroup

/home/hub/public_html/gads/scripts/analytics/hubspot-data.js
 * HubSpot Dashboard Data API
 * Pulls real data from synced MySQL HubSpot tables
 * Uses country reference file for territory classifications

/home/hub/public_html/gads/scripts/analytics/pipeline-probs.js
* Pulls data & calculates 2 pipeline probabilities
1) "Stage Loss": what is the probability that Deal will NOT progress beyond Stage 'x'
2) "Completion Probability": At any given stage what is the probability of that Deal of successful pipeline completion, ie: WON 

/home/hub/public_html/gads/scripts/analytics/pipeline-server.js
 * Fast Pipeline Data API - MySQL Powered
 * /scripts/analytics/fast-pipeline-data.js
 * Lightning-fast queries using your Google Ads records + HubSpot data

/home/hub/public_html/gads/scripts/analytics/pipeline-analysis.html
* REACT Dashboard showing both MQL & SQL pathways as one complete pipeline
* "Refresh Probabilities" button calls pipeline-probs.js when needed (significant data crunching & marginal differences over time meant it was not required to run that every time the Pipeline Dashboard loaded

/home/hub/public_html/gads/scripts/analytics/burn-rate.html
* Measures the number & percentage of Unsupported Territory Contacts (ie: those MQLs who clicked and Ad, performed the CTA (Webform Submission / Live Chat Click etc) but failed SQL validation due in the main to their passport nationality not being an Unsupported Territory

NOTE: /home/hub/public_html/gads/scripts/country/load-countries.js calls upon /home/hub/public_html/gads/scripts/country/load-countries.js which houses a complete list of countries and their corresponding Territory. 
Territories are categorized thus: EU / NonEU(Visa on Arrival) / Non-EU(VisaBeforeDeparture) / Unsupported Territory

Folder Architecture: 
[hub@server gads]$ find /home/hub/public_html/gads -not -path "/.git" -not -path "/node_modules" | sed -e 's|[^/]*/|- |g' -e 's|^- ||'
- - - gads
- - - - index.js
- - - - logger.js
- - - - gads.log
- - - - tmp
- - - - - restart.txt
- - - - gads_history.log
- - - - package-lock.json
- - - - db-test.js
- - - - scripts
- - - - - google
- - - - - - gads-sync.js
- - - - - - budget.js
- - - - - - debug-account.js
- - - - - - gads-test.js
- - - - - - campaign.js
- - - - - update-mysql-campaigns.js
- - - - - country
- - - - - - country-codes.json
- - - - - - load-countries.js
- - - - - analytics
- - - - - - pipeline-probs.js
- - - - - - pipeline-server.js
- - - - - - budget.js
- - - - - - territory.js.bak
- - - - - - burn.js
- - - - - - dashboard.js
- - - - - - dashboard-server.js
- - - - - - pipeline-analysis.html
- - - - - - burn-rate.html
- - - - - - hubspot-data.js
- - - - - hubspot
- - - - - - samples
- - - - - - - contact-347587358941-export.json
- - - - - - - contact-159714487541-export.json
- - - - - - - new-sample.json
- - - - - - - contact-393847317739-export.json
- - - - - - - contact-394450632948-export.json
- - - - - - hubspot-sync.js
- - - - - - fieldmap.js
- - - - - - status.js
- - - - - - hubspot-test.js
- - - - - models
- - - - - - hub-contact.js
- - - - - - hub-country.js
- - - - - - hub-deal.js
- - - - - - hub-pipeline.js
- - - - - campaigns.json
- - - - .env
- - - - public
- - - - .htaccess
- - - - package.json