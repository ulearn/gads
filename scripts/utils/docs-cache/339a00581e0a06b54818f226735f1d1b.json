{
  "url": "https://developers.google.com/google-ads/api/samples/add-performance-max-campaign",
  "title": "Add Performance Max Campaign  |  Google Ads API  |  Google for DevelopersGoogleGoogle",
  "headings": [
    {
      "level": "h1",
      "text": "Add Performance Max Campaign\n\n    \n    \n      \n    \n\n    \n      \n      Stay organized with collections\n    \n    \n      \n      Save and categorize content based on your preferences."
    },
    {
      "level": "h2",
      "text": "AI-generated Key Takeaways"
    },
    {
      "level": "h3",
      "text": "Java"
    },
    {
      "level": "h3",
      "text": "C#"
    },
    {
      "level": "h3",
      "text": "PHP"
    },
    {
      "level": "h3",
      "text": "Python"
    },
    {
      "level": "h3",
      "text": "Ruby"
    },
    {
      "level": "h3",
      "text": "Perl"
    }
  ],
  "codeBlocks": [
    "// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.ads.googleads.examples.advancedoperations;\n\nimport static com.google.ads.googleads.examples.utils.CodeSampleHelper.getPrintableDateTime;\nimport static com.google.ads.googleads.v22.enums.EuPoliticalAdvertisingStatusEnum.EuPoliticalAdvertisingStatus.DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING;\n\nimport com.beust.jcommander.Parameter;\nimport com.google.ads.googleads.examples.utils.ArgumentNames;\nimport com.google.ads.googleads.examples.utils.CodeSampleParams;\nimport com.google.ads.googleads.lib.GoogleAdsClient;\nimport com.google.ads.googleads.v22.common.AudienceInfo;\nimport com.google.ads.googleads.v22.common.ImageAsset;\nimport com.google.ads.googleads.v22.common.LanguageInfo;\nimport com.google.ads.googleads.v22.common.LocationInfo;\nimport com.google.ads.googleads.v22.common.MaximizeConversionValue;\nimport com.google.ads.googleads.v22.common.SearchThemeInfo;\nimport com.google.ads.googleads.v22.common.TextAsset;\nimport com.google.ads.googleads.v22.enums.AdvertisingChannelTypeEnum.AdvertisingChannelType;\nimport com.google.ads.googleads.v22.enums.AssetAutomationStatusEnum.AssetAutomationStatus;\nimport com.google.ads.googleads.v22.enums.AssetAutomationTypeEnum.AssetAutomationType;\nimport com.google.ads.googleads.v22.enums.AssetFieldTypeEnum.AssetFieldType;\nimport com.google.ads.googleads.v22.enums.AssetGroupStatusEnum.AssetGroupStatus;\nimport com.google.ads.googleads.v22.enums.BudgetDeliveryMethodEnum.BudgetDeliveryMethod;\nimport com.google.ads.googleads.v22.enums.CampaignStatusEnum.CampaignStatus;\nimport com.google.ads.googleads.v22.errors.GoogleAdsError;\nimport com.google.ads.googleads.v22.errors.GoogleAdsException;\nimport com.google.ads.googleads.v22.resources.Asset;\nimport com.google.ads.googleads.v22.resources.AssetGroup;\nimport com.google.ads.googleads.v22.resources.AssetGroupAsset;\nimport com.google.ads.googleads.v22.resources.AssetGroupSignal;\nimport com.google.ads.googleads.v22.resources.Campaign;\nimport com.google.ads.googleads.v22.resources.Campaign.AssetAutomationSetting;\nimport com.google.ads.googleads.v22.resources.Campaign.AssetAutomationSettingOrBuilder;\nimport com.google.ads.googleads.v22.resources.CampaignAsset;\nimport com.google.ads.googleads.v22.resources.CampaignBudget;\nimport com.google.ads.googleads.v22.resources.CampaignCriterion;\nimport com.google.ads.googleads.v22.services.AssetGroupAssetOperation;\nimport com.google.ads.googleads.v22.services.AssetGroupOperation;\nimport com.google.ads.googleads.v22.services.AssetGroupSignalOperation;\nimport com.google.ads.googleads.v22.services.AssetOperation;\nimport com.google.ads.googleads.v22.services.CampaignAssetOperation;\nimport com.google.ads.googleads.v22.services.CampaignBudgetOperation;\nimport com.google.ads.googleads.v22.services.CampaignCriterionOperation;\nimport com.google.ads.googleads.v22.services.CampaignOperation;\nimport com.google.ads.googleads.v22.services.GoogleAdsServiceClient;\nimport com.google.ads.googleads.v22.services.MutateGoogleAdsResponse;\nimport com.google.ads.googleads.v22.services.MutateOperation;\nimport com.google.ads.googleads.v22.services.MutateOperationResponse;\nimport com.google.ads.googleads.v22.utils.ResourceNames;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.io.ByteStreams;\nimport com.google.protobuf.ByteString;\nimport com.google.protobuf.Descriptors.FieldDescriptor;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.stream.Collectors;\nimport org.joda.time.DateTime;\n\n/**\n * This example shows how to create a Performance Max campaign.\n *\n * <p>For more information about Performance Max campaigns, see\n * https://developers.google.com/google-ads/api/docs/performance-max/overview\n *\n * <p>Prerequisites: - You must have at least one conversion action in the account. For more about\n * conversion actions, see\n * https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions\n *\n * <p>This example uses the default customer conversion goals. For an example of setting\n * campaign-specific conversion goals, see {@link\n * com.google.ads.googleads.examples.shoppingads.AddPerformanceMaxRetailCampaign}.\n */\npublic class AddPerformanceMaxCampaign {\n\n  // We specify temporary IDs that are specific to a single mutate request. Temporary IDs are always\n  // negative and unique within one mutate request.\n  //\n  // <p>See https://developers.google.com/google-ads/api/docs/mutating/best-practices for further\n  // details.\n  //\n  // <p>These temporary IDs are fixed because they are used in multiple places.\n  private static final int BUDGET_TEMPORARY_ID = -1;\n  private static final int PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID = -2;\n  private static final int ASSET_GROUP_TEMPORARY_ID = -3;\n\n  // There are also entities that will be created in the same request but do not\n  // need to be fixed temporary IDs because they are referenced only once.\n  private static long temporaryId = ASSET_GROUP_TEMPORARY_ID - 1;\n\n  private static class AddPerformanceMaxCampaignParams extends CodeSampleParams {\n\n    @Parameter(names = ArgumentNames.CUSTOMER_ID, required = true)\n    private Long customerId;\n\n    @Parameter(\n        names = ArgumentNames.AUDIENCE_ID,\n        description =\n            \"An audience ID to use to improve the targeting of the Performance Max campaign\")\n    private Long audienceId;\n\n    @Parameter(\n        names = ArgumentNames.BRAND_GUIDELINES_ENABLED,\n        arity = 1,\n        description =\n            \"A boolean value indicating if the created campaign is enabled for brand guidelines\")\n    private boolean brandGuidelinesEnabled = true;\n  }\n\n  public static void main(String[] args) throws IOException {\n    AddPerformanceMaxCampaignParams params = new AddPerformanceMaxCampaignParams();\n    if (!params.parseArguments(args)) {\n\n      // Either pass the required parameters for this example on the command line, or insert them\n      // into the code here. See the parameter class definition above for descriptions.\n      params.customerId = Long.parseLong(\"INSERT_CUSTOMER_ID_HERE\");\n\n      // Optional: Specify an audience ID.\n      // params.audienceId = Long.parseLong(\"INSERT_AUDIENCE_ID_HERE\");\n    }\n\n    GoogleAdsClient googleAdsClient = null;\n    try {\n      googleAdsClient = GoogleAdsClient.newBuilder().fromPropertiesFile().build();\n    } catch (FileNotFoundException fnfe) {\n      System.err.printf(\n          \"Failed to load GoogleAdsClient configuration from file. Exception: %s%n\", fnfe);\n      System.exit(1);\n    } catch (IOException ioe) {\n      System.err.printf(\"Failed to create GoogleAdsClient. Exception: %s%n\", ioe);\n      System.exit(1);\n    }\n\n    try {\n      new AddPerformanceMaxCampaign()\n          .runExample(\n              googleAdsClient, params.customerId, params.audienceId, params.brandGuidelinesEnabled);\n    } catch (GoogleAdsException gae) {\n      // GoogleAdsException is the base class for most exceptions thrown by an API request.\n      // Instances of this exception have a message and a GoogleAdsFailure that contains a\n      // collection of GoogleAdsErrors that indicate the underlying causes of the\n      // GoogleAdsException.\n      System.err.printf(\n          \"Request ID %s failed due to GoogleAdsException. Underlying errors:%n\",\n          gae.getRequestId());\n      int i = 0;\n      for (GoogleAdsError googleAdsError : gae.getGoogleAdsFailure().getErrorsList()) {\n        System.err.printf(\"  Error %d: %s%n\", i++, googleAdsError);\n      }\n      System.exit(1);\n    }\n  }\n\n  /**\n   * Runs the example.\n   *\n   * @param googleAdsClient the Google Ads API client.\n   * @param customerId the client customer ID.\n   * @param audienceId the optional audience ID.\n   * @param brandGuidelinesEnabled indicates if the campaign is enabled for brand guidelines.\n   */\n  private void runExample(\n      GoogleAdsClient googleAdsClient,\n      long customerId,\n      Long audienceId,\n      boolean brandGuidelinesEnabled)\n      throws IOException {\n    // Performance Max campaigns require that repeated assets such as headlines\n    // and descriptions be created before the campaign.\n    // For the list of required assets for a Performance Max campaign, see\n    // https://developers.google.com/google-ads/api/docs/performance-max/assets\n    //\n    // Creates the headlines.\n    List<String> headlines = ImmutableList.of(\"Travel\", \"Travel Reviews\", \"Book travel\");\n    List<String> headlineAssetResourceNames =\n        createMultipleTextAssets(googleAdsClient, customerId, headlines);\n    // Creates the descriptions.\n    List<String> descriptions = ImmutableList.of(\"Take to the air!\", \"Fly to the sky!\");\n    List<String> descriptionAssetResourceNames =\n        createMultipleTextAssets(googleAdsClient, customerId, descriptions);\n\n    // The below methods create and return MutateOperations that we later\n    // provide to the GoogleAdsService.Mutate method in order to create the\n    // entities in a single request. Since the entities for a Performance Max\n    // campaign are closely tied to one-another, it's considered a best practice\n    // to create them in a single Mutate request, so they all complete\n    // successfully or fail entirely, leaving no orphaned entities. See:\n    // https://developers.google.com/google-ads/api/docs/mutating/overview\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n    mutateOperations.add(createCampaignBudgetOperation(customerId));\n    mutateOperations.add(createPerformanceMaxCampaignOperation(customerId, brandGuidelinesEnabled));\n    mutateOperations.addAll(createCampaignCriterionOperations(customerId));\n    String assetGroupResourceName = ResourceNames.assetGroup(customerId, ASSET_GROUP_TEMPORARY_ID);\n    mutateOperations.addAll(\n        createAssetGroupOperations(\n            customerId,\n            assetGroupResourceName,\n            headlineAssetResourceNames,\n            descriptionAssetResourceNames,\n            brandGuidelinesEnabled));\n    mutateOperations.addAll(\n        createAssetGroupSignalOperations(customerId, assetGroupResourceName, audienceId));\n\n    try (GoogleAdsServiceClient googleAdsServiceClient =\n        googleAdsClient.getLatestVersion().createGoogleAdsServiceClient()) {\n      MutateGoogleAdsResponse response =\n          googleAdsServiceClient.mutate(Long.toString(customerId), mutateOperations);\n      printResponseDetails(response);\n    }\n  }\n\n  /** Creates a MutateOperation that creates a new CampaignBudget. */\n  private MutateOperation createCampaignBudgetOperation(long customerId) {\n    CampaignBudget campaignBudget =\n        CampaignBudget.newBuilder()\n            .setName(\"Performance Max campaign budget #\" + getPrintableDateTime())\n            // The budget period already defaults to DAILY.\n            .setAmountMicros(50_000_000)\n            .setDeliveryMethod(BudgetDeliveryMethod.STANDARD)\n            // A Performance Max campaign cannot use a shared campaign budget.\n            .setExplicitlyShared(false)\n            // Set a temporary ID in the budget's resource name, so it can be referenced\n            // by the campaign in later steps.\n            .setResourceName(ResourceNames.campaignBudget(customerId, BUDGET_TEMPORARY_ID))\n            .build();\n\n    return MutateOperation.newBuilder()\n        .setCampaignBudgetOperation(\n            CampaignBudgetOperation.newBuilder().setCreate(campaignBudget).build())\n        .build();\n  }\n\n\n  /** Creates a MutateOperation that creates a new Performance Max campaign. */\n  private MutateOperation createPerformanceMaxCampaignOperation(\n      long customerId, boolean brandGuidelinesEnabled) {\n    Campaign performanceMaxCampaign =\n        Campaign.newBuilder()\n            .setName(\"Performance Max campaign #\" + getPrintableDateTime())\n            // Sets the campaign status as PAUSED. The campaign is the only entity in\n            // the mutate request that should have its status set.\n            .setStatus(CampaignStatus.PAUSED)\n            // All Performance Max campaigns have an advertising_channel_type of\n            // PERFORMANCE_MAX. The advertising_channel_sub_type should not be set.\n            .setAdvertisingChannelType(AdvertisingChannelType.PERFORMANCE_MAX)\n            // Bidding strategy must be set directly on the campaign.\n            // Setting a portfolio bidding strategy by resource name is not supported.\n            // Max Conversion and Maximize Conversion Value are the only strategies\n            // supported for Performance Max campaigns.\n            // An optional ROAS (Return on Advertising Spend) can be set for\n            // maximize_conversion_value. The ROAS value must be specified as a ratio in\n            // the API. It is calculated by dividing \"total value\" by \"total spend\".\n            // For more information on Maximize Conversion Value, see the support\n            // article: http://support.google.com/google-ads/answer/7684216.\n            // A targetRoas of 3.5 corresponds to a 350% return on ad spend.\n            .setMaximizeConversionValue(\n                MaximizeConversionValue.newBuilder().setTargetRoas(3.5).build())\n            // Sets if the campaign is enabled for brand guidelines. For more information on brand\n            // guidelines, see https://support.google.com/google-ads/answer/14934472.\n            .setBrandGuidelinesEnabled(brandGuidelinesEnabled)\n            // Assigns the resource name with a temporary ID.\n            .setResourceName(\n                ResourceNames.campaign(customerId, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID))\n            // Sets the budget using the given budget resource name.\n            .setCampaignBudget(ResourceNames.campaignBudget(customerId, BUDGET_TEMPORARY_ID))\n            // Declares whether this campaign serves political ads targeting the EU.\n            .setContainsEuPoliticalAdvertising(DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING)\n            // Optional fields.\n            .setStartDate(new DateTime().plusDays(1).toString(\"yyyyMMdd\"))\n            .setEndDate(new DateTime().plusDays(365).toString(\"yyyyMMdd\"))\n            // Configures the optional opt-in/out status for asset automation settings.\n            .addAllAssetAutomationSettings(ImmutableList.of(\n                AssetAutomationSetting.newBuilder()\n                    .setAssetAutomationType(AssetAutomationType.GENERATE_IMAGE_EXTRACTION)\n                    .setAssetAutomationStatus(AssetAutomationStatus.OPTED_IN).build(),\n                AssetAutomationSetting.newBuilder()\n                    .setAssetAutomationType(\n                        AssetAutomationType.FINAL_URL_EXPANSION_TEXT_ASSET_AUTOMATION)\n                    .setAssetAutomationStatus(AssetAutomationStatus.OPTED_IN).build(),\n                AssetAutomationSetting.newBuilder()\n                    .setAssetAutomationType(AssetAutomationType.TEXT_ASSET_AUTOMATION)\n                    .setAssetAutomationStatus(AssetAutomationStatus.OPTED_IN).build(),\n                AssetAutomationSetting.newBuilder()\n                    .setAssetAutomationType(AssetAutomationType.GENERATE_ENHANCED_YOUTUBE_VIDEOS)\n                    .setAssetAutomationStatus(AssetAutomationStatus.OPTED_IN).build(),\n                AssetAutomationSetting.newBuilder()\n                    .setAssetAutomationType(AssetAutomationType.GENERATE_IMAGE_ENHANCEMENT)\n                    .setAssetAutomationStatus(AssetAutomationStatus.OPTED_IN).build()))\n            .build();\n\n    return MutateOperation.newBuilder()\n        .setCampaignOperation(\n            CampaignOperation.newBuilder().setCreate(performanceMaxCampaign).build())\n        .build();\n  }\n\n\n  /** Creates a list of MutateOperations that create new campaign criteria. */\n  private List<MutateOperation> createCampaignCriterionOperations(long customerId) {\n    String campaignResourceName =\n        ResourceNames.campaign(customerId, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID);\n    List<CampaignCriterion> campaignCriteria = new ArrayList<>();\n    // Sets the LOCATION campaign criteria.\n    // Targets all of New York City except Brooklyn.\n    // Location IDs are listed here:\n    // https://developers.google.com/google-ads/api/reference/data/geotargets\n    // and they can also be retrieved using the GeoTargetConstantService as shown\n    // here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting\n    //\n    // We will add one positive location target for New York City (ID=1023191)\n    // and one negative location target for Brooklyn (ID=1022762).\n    // First, adds the positive (negative = False) for New York City.\n    campaignCriteria.add(\n        CampaignCriterion.newBuilder()\n            .setCampaign(campaignResourceName)\n            .setLocation(\n                LocationInfo.newBuilder()\n                    .setGeoTargetConstant(ResourceNames.geoTargetConstant(1023191))\n                    .build())\n            .setNegative(false)\n            .build());\n    // Next adds the negative target for Brooklyn.\n    campaignCriteria.add(\n        CampaignCriterion.newBuilder()\n            .setCampaign(campaignResourceName)\n            .setLocation(\n                LocationInfo.newBuilder()\n                    .setGeoTargetConstant(ResourceNames.geoTargetConstant(1022762))\n                    .build())\n            .setNegative(true)\n            .build());\n    // Sets the LANGUAGE campaign criterion.\n    campaignCriteria.add(\n        CampaignCriterion.newBuilder()\n            .setCampaign(campaignResourceName)\n            // Sets the language.\n            // For a list of all language codes, see:\n            // https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7\n            .setLanguage(\n                LanguageInfo.newBuilder()\n                    .setLanguageConstant(ResourceNames.languageConstant(1000)) // English\n                    .build())\n            .build());\n    // Returns a list of mutate operations with one operation per criterion.\n    return campaignCriteria.stream()\n        .map(\n            criterion ->\n                MutateOperation.newBuilder()\n                    .setCampaignCriterionOperation(\n                        CampaignCriterionOperation.newBuilder().setCreate(criterion).build())\n                    .build())\n        .collect(Collectors.toList());\n  }\n\n\n  /** Creates multiple text assets and returns the list of resource names. */\n  private List<String> createMultipleTextAssets(\n      GoogleAdsClient googleAdsClient, long customerId, List<String> texts) {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n    for (String text : texts) {\n      Asset asset = Asset.newBuilder().setTextAsset(TextAsset.newBuilder().setText(text)).build();\n      AssetOperation assetOperation = AssetOperation.newBuilder().setCreate(asset).build();\n      mutateOperations.add(MutateOperation.newBuilder().setAssetOperation(assetOperation).build());\n    }\n\n    List<String> assetResourceNames = new ArrayList<>();\n    // Creates the service client.\n    try (GoogleAdsServiceClient googleAdsServiceClient =\n        googleAdsClient.getLatestVersion().createGoogleAdsServiceClient()) {\n      // Sends the operations in a single Mutate request.\n      MutateGoogleAdsResponse response =\n          googleAdsServiceClient.mutate(Long.toString(customerId), mutateOperations);\n      for (MutateOperationResponse result : response.getMutateOperationResponsesList()) {\n        if (result.hasAssetResult()) {\n          assetResourceNames.add(result.getAssetResult().getResourceName());\n        }\n      }\n      printResponseDetails(response);\n    }\n    return assetResourceNames;\n  }\n\n\n  /** Creates a list of MutateOperations that create a new AssetGroup. */\n  private List<MutateOperation> createAssetGroupOperations(\n      long customerId,\n      String assetGroupResourceName,\n      List<String> headlineAssetResourceNames,\n      List<String> descriptionAssetResourceNames,\n      boolean brandGuidelinesEnabled)\n      throws IOException {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n    String campaignResourceName =\n        ResourceNames.campaign(customerId, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID);\n    // Creates the AssetGroup.\n    AssetGroup assetGroup =\n        AssetGroup.newBuilder()\n            .setName(\"Performance Max asset group #\" + getPrintableDateTime())\n            .setCampaign(campaignResourceName)\n            .addFinalUrls(\"http://www.example.com\")\n            .addFinalMobileUrls(\"http://www.example.com\")\n            .setStatus(AssetGroupStatus.PAUSED)\n            .setResourceName(assetGroupResourceName)\n            .build();\n    AssetGroupOperation assetGroupOperation =\n        AssetGroupOperation.newBuilder().setCreate(assetGroup).build();\n    mutateOperations.add(\n        MutateOperation.newBuilder().setAssetGroupOperation(assetGroupOperation).build());\n\n    // For the list of required assets for a Performance Max campaign, see\n    // https://developers.google.com/google-ads/api/docs/performance-max/assets\n\n    // An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n    // and providing:\n    //   the resource name of the AssetGroup\n    //   the resource name of the Asset\n    //   the field_type of the Asset in this AssetGroup.\n\n    // To learn more about AssetGroups, see\n    // https://developers.google.com/google-ads/api/docs/performance-max/asset-groups\n\n    // Links the previously created multiple text assets.\n\n    // Links the headline assets.\n    for (String resourceName : headlineAssetResourceNames) {\n      mutateOperations.add(\n          createAssetGroupAssetMutateOperation(\n              AssetFieldType.HEADLINE, resourceName, assetGroupResourceName));\n    }\n\n    // Links the description assets.\n    for (String resourceName : descriptionAssetResourceNames) {\n      mutateOperations.add(\n          createAssetGroupAssetMutateOperation(\n              AssetFieldType.DESCRIPTION, resourceName, assetGroupResourceName));\n    }\n\n    // Creates and links the long headline text asset.\n    List<MutateOperation> createAndLinkTextAssetOperations =\n        createAndLinkTextAsset(customerId, \"Travel the World\", AssetFieldType.LONG_HEADLINE);\n    mutateOperations.addAll(createAndLinkTextAssetOperations);\n\n    // Creates and links the business name and logo assets.\n    List<MutateOperation> createAndLinkBrandAssets =\n        createAndLinkBrandAssets(\n            customerId,\n            brandGuidelinesEnabled,\n            \"Interplanetary Cruises\",\n            \"https://gaagl.page.link/bjYi\",\n            \"Marketing Logo\");\n    mutateOperations.addAll(createAndLinkBrandAssets);\n\n    // Creates and links the image assets.\n\n    // Creates and links the Marketing Image Asset.\n    createAndLinkTextAssetOperations =\n        createAndLinkImageAsset(\n            customerId,\n            \"https://gaagl.page.link/Eit5\",\n            AssetFieldType.MARKETING_IMAGE,\n            \"Marketing Image\");\n    mutateOperations.addAll(createAndLinkTextAssetOperations);\n\n    // Creates and links the Square Marketing Image Asset.\n    createAndLinkTextAssetOperations =\n        createAndLinkImageAsset(\n            customerId,\n            \"https://gaagl.page.link/bjYi\",\n            AssetFieldType.SQUARE_MARKETING_IMAGE,\n            \"Square Marketing Image\");\n    mutateOperations.addAll(createAndLinkTextAssetOperations);\n\n    return mutateOperations;\n  }\n\n\n  /** Creates a list of MutateOperations that create a new linked text asset. */\n  List<MutateOperation> createAndLinkTextAsset(\n      long customerId, String text, AssetFieldType assetFieldType) {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n    String assetResourceName = ResourceNames.asset(customerId, getNextTemporaryId());\n    // Creates the Text Asset.\n    Asset asset =\n        Asset.newBuilder()\n            .setResourceName(assetResourceName)\n            .setTextAsset(TextAsset.newBuilder().setText(text).build())\n            .build();\n    AssetOperation assetOperation = AssetOperation.newBuilder().setCreate(asset).build();\n    mutateOperations.add(MutateOperation.newBuilder().setAssetOperation(assetOperation).build());\n\n    // Creates an AssetGroupAsset to link the Asset to the AssetGroup.\n    mutateOperations.add(\n        createAssetGroupAssetMutateOperation(\n            assetFieldType,\n            assetResourceName,\n            ResourceNames.assetGroup(customerId, ASSET_GROUP_TEMPORARY_ID)));\n\n    return mutateOperations;\n  }\n\n\n  /** Creates a list of MutateOperations that create a new linked image asset. */\n  List<MutateOperation> createAndLinkImageAsset(\n      long customerId, String url, AssetFieldType assetFieldType, String assetName)\n      throws IOException {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n    String assetResourceName = ResourceNames.asset(customerId, getNextTemporaryId());\n    // Creates a media file.\n    byte[] assetBytes = ByteStreams.toByteArray(new URL(url).openStream());\n\n    // Creates the Image Asset.\n    Asset asset =\n        Asset.newBuilder()\n            .setResourceName(assetResourceName)\n            .setImageAsset(ImageAsset.newBuilder().setData(ByteString.copyFrom(assetBytes)).build())\n            // Provides a unique friendly name to identify your asset. When there is an existing\n            // image asset with the same content but a different name, the new name will be dropped\n            // silently.\n            .setName(assetName)\n            .build();\n    AssetOperation assetOperation = AssetOperation.newBuilder().setCreate(asset).build();\n    mutateOperations.add(MutateOperation.newBuilder().setAssetOperation(assetOperation).build());\n\n    // Creates an AssetGroupAsset to link the Asset to the AssetGroup.\n    mutateOperations.add(\n        createAssetGroupAssetMutateOperation(\n            assetFieldType,\n            assetResourceName,\n            ResourceNames.assetGroup(customerId, ASSET_GROUP_TEMPORARY_ID)));\n\n    return mutateOperations;\n  }\n\n  /** Creates a list of MutateOperations that create linked brand assets. */\n  List<MutateOperation> createAndLinkBrandAssets(\n      long customerId,\n      boolean brandGuidelinesEnabled,\n      String businessName,\n      String logoUrl,\n      String logoName)\n      throws IOException {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n\n    // Creates the brand name text asset.\n    String businessNameAssetResourceName = ResourceNames.asset(customerId, getNextTemporaryId());\n    Asset businessNameAsset =\n        Asset.newBuilder()\n            .setResourceName(businessNameAssetResourceName)\n            .setTextAsset(TextAsset.newBuilder().setText(businessName).build())\n            .build();\n    AssetOperation businessNameAssetOperation =\n        AssetOperation.newBuilder().setCreate(businessNameAsset).build();\n    mutateOperations.add(\n        MutateOperation.newBuilder().setAssetOperation(businessNameAssetOperation).build());\n\n    // Creates the logo image asset.\n    String logoAssetResourceName = ResourceNames.asset(customerId, getNextTemporaryId());\n    // Creates a media file.\n    byte[] logoBytes = ByteStreams.toByteArray(new URL(logoUrl).openStream());\n    Asset logoAsset =\n        Asset.newBuilder()\n            .setResourceName(logoAssetResourceName)\n            .setImageAsset(ImageAsset.newBuilder().setData(ByteString.copyFrom(logoBytes)).build())\n            // Provides a unique friendly name to identify your asset. When there is an existing\n            // image asset with the same content but a different name, the new name will be dropped\n            // silently.\n            .setName(logoName)\n            .build();\n    AssetOperation logoImageAssetOperation =\n        AssetOperation.newBuilder().setCreate(logoAsset).build();\n    mutateOperations.add(\n        MutateOperation.newBuilder().setAssetOperation(logoImageAssetOperation).build());\n\n    if (brandGuidelinesEnabled) {\n      // Creates CampaignAsset resources to link the Asset resources to the Campaign.\n      mutateOperations.add(\n          createCampaignAssetMutateOperation(\n              customerId, AssetFieldType.BUSINESS_NAME, businessNameAssetResourceName));\n      mutateOperations.add(\n          createCampaignAssetMutateOperation(\n              customerId, AssetFieldType.LOGO, logoAssetResourceName));\n    } else {\n      // Creates an AssetGroupAsset to link the Asset to the AssetGroup.\n      mutateOperations.add(\n          createAssetGroupAssetMutateOperation(\n              AssetFieldType.BUSINESS_NAME,\n              businessNameAssetResourceName,\n              ResourceNames.assetGroup(customerId, ASSET_GROUP_TEMPORARY_ID)));\n      mutateOperations.add(\n          createAssetGroupAssetMutateOperation(\n              AssetFieldType.LOGO,\n              logoAssetResourceName,\n              ResourceNames.assetGroup(customerId, ASSET_GROUP_TEMPORARY_ID)));\n    }\n\n    return mutateOperations;\n  }\n\n  /** Creates a MutateOperation to add an AssetGroupAsset. */\n  MutateOperation createAssetGroupAssetMutateOperation(\n      AssetFieldType fieldType, String assetResourceName, String assetGroupResourceName) {\n    AssetGroupAsset assetGroupAsset =\n        AssetGroupAsset.newBuilder()\n            .setFieldType(fieldType)\n            .setAssetGroup(assetGroupResourceName)\n            .setAsset(assetResourceName)\n            .build();\n    AssetGroupAssetOperation assetGroupAssetOperation =\n        AssetGroupAssetOperation.newBuilder().setCreate(assetGroupAsset).build();\n    return MutateOperation.newBuilder()\n        .setAssetGroupAssetOperation(assetGroupAssetOperation)\n        .build();\n  }\n\n  /** Creates a MutateOperation to add a CampaignAsset. */\n  MutateOperation createCampaignAssetMutateOperation(\n      long customerId, AssetFieldType fieldType, String assetResourceName) {\n    CampaignAsset campaignAsset =\n        CampaignAsset.newBuilder()\n            .setFieldType(fieldType)\n            .setCampaign(ResourceNames.campaign(customerId, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID))\n            .setAsset(assetResourceName)\n            .build();\n    CampaignAssetOperation campaignAssetOperation =\n        CampaignAssetOperation.newBuilder().setCreate(campaignAsset).build();\n    return MutateOperation.newBuilder().setCampaignAssetOperation(campaignAssetOperation).build();\n  }\n\n\n  /**\n   * Creates a list of MutateOperations that create {@link\n   * com.google.ads.googleads.v22.resources.AssetGroupSignal} objects.\n   */\n  private List<MutateOperation> createAssetGroupSignalOperations(\n      long customerId, String assetGroupResourceName, Long audienceId) {\n    List<MutateOperation> mutateOperations = new ArrayList<>();\n\n    if (audienceId != null) {\n      // Creates an audience asset group signal.\n      // To learn more about Audience Signals, see:\n      // https://developers.google.com/google-ads/api/performance-max/asset-group-signals#audiences\n      AssetGroupSignal audienceSignal =\n          AssetGroupSignal.newBuilder()\n              .setAssetGroup(assetGroupResourceName)\n              .setAudience(\n                  AudienceInfo.newBuilder()\n                      .setAudience(ResourceNames.audience(customerId, audienceId)))\n              .build();\n\n      mutateOperations.add(\n          MutateOperation.newBuilder()\n              .setAssetGroupSignalOperation(\n                  AssetGroupSignalOperation.newBuilder().setCreate(audienceSignal))\n              .build());\n    }\n\n    // Creates a search theme asset group signal.\n    // To learn more about Search Themes Signals, see:\n    // https://developers.google.com/google-ads/api/performance-max/asset-group-signals#search_themes\n    AssetGroupSignal searchThemeSignal =\n        AssetGroupSignal.newBuilder()\n            .setAssetGroup(assetGroupResourceName)\n            .setSearchTheme(SearchThemeInfo.newBuilder().setText(\"travel\").build())\n            .build();\n\n    mutateOperations.add(\n        MutateOperation.newBuilder()\n            .setAssetGroupSignalOperation(\n                AssetGroupSignalOperation.newBuilder().setCreate(searchThemeSignal))\n            .build());\n\n    return mutateOperations;\n  }\n\n  /**\n   * Prints the details of a MutateGoogleAdsResponse.\n   *\n   * <p>Parses the \"response\" oneof field name and uses it to extract the new entity's name and\n   * resource name.\n   */\n  private void printResponseDetails(MutateGoogleAdsResponse response) {\n    // Parses the Mutate response to print details about the entities that were created by the\n    // request.\n    String suffix = \"_result\";\n    for (MutateOperationResponse result : response.getMutateOperationResponsesList()) {\n      for (Entry<FieldDescriptor, Object> responseFields : result.getAllFields().entrySet()) {\n        String fieldName = responseFields.getKey().getName();\n        String value = responseFields.getValue().toString().trim();\n        if (fieldName.endsWith(suffix)) {\n          fieldName = fieldName.substring(0, fieldName.length() - suffix.length());\n        }\n        System.out.printf(\"Created a(n) %s with %s.%n\", fieldName, value);\n      }\n    }\n  }\n\n  /** Returns the next temporary ID and decreases it by one. */\n  private long getNextTemporaryId() {\n    return temporaryId--;\n  }\n}\nAddPerformanceMaxCampaign.java",
    "// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nusing CommandLine;\nusing Google.Ads.Gax.Examples;\nusing Google.Ads.Gax.Util;\nusing Google.Ads.GoogleAds.Config;\nusing Google.Ads.GoogleAds.Lib;\nusing Google.Ads.GoogleAds.V22.Common;\nusing Google.Ads.GoogleAds.V22.Errors;\nusing Google.Ads.GoogleAds.V22.Resources;\nusing Google.Ads.GoogleAds.V22.Services;\nusing Google.Protobuf;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing static Google.Ads.GoogleAds.V22.Enums.AdvertisingChannelTypeEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.AssetAutomationStatusEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.AssetAutomationTypeEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.AssetFieldTypeEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.AssetGroupStatusEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.CampaignStatusEnum.Types;\nusing static Google.Ads.GoogleAds.V22.Enums.EuPoliticalAdvertisingStatusEnum.Types;\n\nnamespace Google.Ads.GoogleAds.Examples.V22\n{\n    /// <summary>\n    /// This example shows how to create a Performance Max campaign.\n    ///\n    /// For more information about Performance Max campaigns, see\n    /// https://developers.google.com/google-ads/api/docs/performance-max/overview\n    ///\n    /// Prerequisites:\n    /// - You must have at least one conversion action in the account. For\n    /// more about conversion actions, see\n    /// https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions\n    ///\n    /// This example uses the default customer conversion goals. For an example\n    /// of setting campaign-specific conversion goals, see\n    /// ShoppingAds/AddPerformanceMaxRetailCampaign.cs\n    /// </summary>\n    public class AddPerformanceMaxCampaign : ExampleBase\n    {\n        /// <summary>\n        /// Command line options for running the <see cref=\"AddPerformanceMaxCampaign\"/> example.\n        /// </summary>\n        public class Options : OptionsBase\n        {\n            /// <summary>\n            /// The Google Ads customer ID.\n            /// </summary>\n            [Option(\"customerId\", Required = true, HelpText =\n                \"The Google Ads customer ID.\")]\n            public long CustomerId { get; set; }\n\n            /// <summary>\n            /// Optional: An audience ID to use to improve the targeting of the Performance Max\n            /// campaign.\n            /// </summary>\n            [Option(\"audienceId\", Required = false, HelpText = \"The ID of an audience.\")]\n            public long? AudienceId { get; set; }\n\n            /// <summary>\n            /// Optional: A boolean value indicating if the campaign is enabled for brand\n            /// guidelines.\n            /// </summary>\n            [Option(\"brandGuidelinesEnabled\", Required = false, HelpText =\n                \"A boolean value indicating if the campaign is enabled for brand guidelines.\")]\n            public bool BrandGuidelinesEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Main method, to run this code example as a standalone application.\n        /// </summary>\n        /// <param name=\"args\">The command line arguments.</param>\n        public static void Main(string[] args)\n        {\n            Options options = ExampleUtilities.ParseCommandLine<Options>(args);\n\n            AddPerformanceMaxCampaign codeExample = new AddPerformanceMaxCampaign();\n            Console.WriteLine(codeExample.Description);\n            codeExample.Run(\n                new GoogleAdsClient(),\n                options.CustomerId,\n                options.AudienceId,\n                options.BrandGuidelinesEnabled\n            );\n        }\n\n        // We specify temporary IDs that are specific to a single mutate request. Temporary IDs are\n        // always negative and unique within one mutate request.\n        //\n        // See https://developers.google.com/google-ads/api/docs/mutating/best-practices for further\n        // details.\n        //\n        // These temporary IDs are fixed because they are used in multiple places.\n        private const int TEMPORARY_ID_BUDGET = -1;\n\n        private const int TEMPORARY_ID_CAMPAIGN = -2;\n        private const int TEMPORARY_ID_ASSET_GROUP = -3;\n\n        // There are also entities that will be created in the same request but do not need to be\n        // fixed temporary IDs because they are referenced only once.\n        private class AssetTemporaryResourceNameGenerator\n        {\n            private long customerId;\n            private long next;\n\n            public AssetTemporaryResourceNameGenerator(long customerId, long assetGroupId)\n            {\n                this.customerId = customerId;\n                this.next = assetGroupId - 1;\n            }\n\n            public string Next()\n            {\n                long i = next;\n                Interlocked.Decrement(ref next);\n                return ResourceNames.Asset(customerId, i);\n            }\n        }\n\n        /// <summary>\n        /// Returns a description about the code example.\n        /// </summary>\n        public override string Description =>\n            \"This example shows how to create a Performance Max campaign.\";\n\n        /// <summary>\n        /// Runs the code example.\n        /// </summary>\n        /// <param name=\"client\">The Google Ads client.</param>\n        /// <param name=\"customerId\">The Google Ads customer ID.</param>\n        /// <param name=\"audienceId\">The optional audience ID.</param>\n        /// <param name=\"brandGuidelinesEnabled\">Whether or not to enable brand guidelines.</param>\n        public void Run(GoogleAdsClient client, long customerId, long? audienceId,\n            bool brandGuidelinesEnabled)\n        {\n            try\n            {\n                GoogleAdsServiceClient googleAdsServiceClient =\n                    client.GetService(Services.V22.GoogleAdsService);\n\n                // Performance Max campaigns require that repeated assets such as headlines and\n                // descriptions be created before the campaign.\n                //\n                // For the list of required assets for a Performance Max campaign, see\n                // https://developers.google.com/google-ads/api/docs/performance-max/assets\n                //\n                // Create the headlines.\n                List<string> headlineAssetResourceNames = CreateMultipleTextAssets(\n                    client,\n                    customerId,\n                    new[] {\n                    \"Travel\",\n                    \"Travel Reviews\",\n                    \"Book travel\"\n                    }\n                );\n\n                // Create the descriptions.\n                List<string> descriptionAssetResourceNames = CreateMultipleTextAssets(\n                    client,\n                    customerId,\n                    new[] {\n                    \"Take to the air!\",\n                    \"Fly to the sky!\"\n                    }\n                );\n\n                string tempResourceNameCampaignBudget = ResourceNames.CampaignBudget(\n                    customerId,\n                    TEMPORARY_ID_BUDGET\n                );\n\n                // The below methods create and return MutateOperations that we later provide to\n                // the GoogleAdsService.Mutate method in order to create the entities in a single\n                // request. Since the entities for a Performance Max campaign are closely tied to\n                // one-another, it is considered a best practice to create them in a single Mutate\n                // request so they all complete successfully or fail entirely, leaving no\n                // orphaned entities.\n                //\n                // See: https://developers.google.com/google-ads/api/docs/mutating/overview\n                MutateOperation campaignBudgetOperation = CreateCampaignBudgetOperation(\n                    tempResourceNameCampaignBudget\n                );\n\n                string tempResourceNameCampaign = ResourceNames.Campaign(\n                    customerId,\n                    TEMPORARY_ID_CAMPAIGN\n                );\n\n                MutateOperation performanceMaxCampaignOperation =\n                    CreatePerformanceMaxCampaignOperation(\n                        tempResourceNameCampaign,\n                        tempResourceNameCampaignBudget,\n                        brandGuidelinesEnabled\n                    );\n\n                List<MutateOperation> campaignCriterionOperations =\n                    CreateCampaignCriterionOperations(tempResourceNameCampaign);\n\n                List<MutateOperation> assetGroupOperations =\n                    CreateAssetGroupOperations(\n                        tempResourceNameCampaign,\n                        ResourceNames.AssetGroup(customerId, TEMPORARY_ID_ASSET_GROUP),\n                        headlineAssetResourceNames,\n                        descriptionAssetResourceNames,\n                        new AssetTemporaryResourceNameGenerator(\n                            customerId,\n                            TEMPORARY_ID_ASSET_GROUP\n                        ),\n                        client.Config,\n                        brandGuidelinesEnabled\n                    );\n\n                List<MutateOperation> assetGroupSignalOperations =\n                    CreateAssetGroupSignalOperations(\n                        customerId,\n                        ResourceNames.AssetGroup(customerId, TEMPORARY_ID_ASSET_GROUP),\n                        audienceId\n                    );\n\n                MutateGoogleAdsRequest request = new MutateGoogleAdsRequest\n                {\n                    CustomerId = customerId.ToString()\n                };\n\n                // It's important to create these entities in this order because they depend on\n                // each other.\n                //\n                // Additionally, we take several lists of operations and flatten them into one\n                // large list.\n                request.MutateOperations.Add(campaignBudgetOperation);\n                request.MutateOperations.Add(performanceMaxCampaignOperation);\n                request.MutateOperations.AddRange(campaignCriterionOperations);\n                request.MutateOperations.AddRange(assetGroupOperations);\n                request.MutateOperations.AddRange(assetGroupSignalOperations);\n\n                MutateGoogleAdsResponse response = googleAdsServiceClient.Mutate(request);\n\n                PrintResponseDetails(response);\n            }\n            catch (GoogleAdsException e)\n            {\n                Console.WriteLine(\"Failure:\");\n                Console.WriteLine($\"Message: {e.Message}\");\n                Console.WriteLine($\"Failure: {e.Failure}\");\n                Console.WriteLine($\"Request ID: {e.RequestId}\");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Creates a MutateOperation that creates a new CampaignBudget.\n        ///\n        /// A temporary ID will be assigned to this campaign budget so that it can be\n        /// referenced by other objects being created in the same Mutate request.\n        /// </summary>\n        /// <param name=\"budgetResourceName\">The temporary resource name of the budget to\n        /// create.</param>\n        /// <returns>A MutateOperation that creates a CampaignBudget.</returns>\n        private MutateOperation CreateCampaignBudgetOperation(string budgetResourceName)\n        {\n            MutateOperation operation = new MutateOperation\n            {\n                CampaignBudgetOperation = new CampaignBudgetOperation\n                {\n                    Create = new CampaignBudget\n                    {\n                        Name = \"Performance Max campaign budget #\"\n                          + ExampleUtilities.GetRandomString(),\n\n                        // The budget period already defaults to DAILY.\n                        AmountMicros = 50000000,\n\n                        // A Performance Max campaign cannot use a shared campaign budget.\n                        ExplicitlyShared = false,\n\n                        // Set a temporary ID in the budget's resource name so it can be referenced\n                        // by the campaign in later steps.\n                        ResourceName = budgetResourceName\n                    }\n                }\n            };\n\n            return operation;\n        }\n\n\n        /// Creates a MutateOperation that creates a new Performance Max campaign.\n        /// <param name=\"campaignResourceName\">The campaign resource name.</param>\n        /// <param name=\"campaignBudgetResourceName\">The campaign budget resource name.</param>\n        /// <param name=\"brandGuidelinesEnabled\">Whether or not to enable brand guidelines.</param>\n        /// <returns>A MutateOperations that will create this new campaign.</returns>\n        private MutateOperation CreatePerformanceMaxCampaignOperation(\n            string campaignResourceName,\n            string campaignBudgetResourceName,\n            bool brandGuidelinesEnabled)\n        {\n            Campaign campaign = new Campaign()\n            {\n                Name = \"Performance Max campaign #\" + ExampleUtilities.GetRandomString(),\n\n                // Set the campaign status as PAUSED. The campaign is the only entity in\n                // the mutate request that should have its status set.\n                Status = CampaignStatus.Paused,\n\n                // All Performance Max campaigns have an AdvertisingChannelType of\n                // PerformanceMax. The AdvertisingChannelSubType should not be set.\n                AdvertisingChannelType = AdvertisingChannelType.PerformanceMax,\n\n                // Bidding strategy must be set directly on the campaign. Setting a\n                // portfolio bidding strategy by resource name is not supported. Max\n                // Conversion and Maximize Conversion Value are the only strategies\n                // supported for Performance Max campaigns. BiddingStrategyType is\n                // read-only and cannot be set by the API. An optional ROAS (Return on\n                // Advertising Spend) can be set to enable the MaximizeConversionValue\n                // bidding strategy. The ROAS value must be specified as a ratio in the API.\n                // It is calculated by dividing \"total value\" by \"total spend\".\n                //\n                // For more information on Maximize Conversion Value, see the support\n                // article:\n                // http://support.google.com/google-ads/answer/7684216.\n                //\n                // A target_roas of 3.5 corresponds to a 350% return on ad spend.\n                MaximizeConversionValue = new MaximizeConversionValue()\n                {\n                    TargetRoas = 3.5\n                },\n\n                // Use the temporary resource name created earlier\n                ResourceName = campaignResourceName,\n\n                // Set the budget using the given budget resource name.\n                CampaignBudget = campaignBudgetResourceName,\n\n                // Set if the campaign is enabled for brand guidelines. For more information\n                // on brand guidelines, see https://support.google.com/google-ads/answer/14934472.\n                BrandGuidelinesEnabled = brandGuidelinesEnabled,\n\n                // Declare whether or not this campaign contains political ads targeting the EU.\n                ContainsEuPoliticalAdvertising = EuPoliticalAdvertisingStatus.DoesNotContainEuPoliticalAdvertising,\n\n                // Optional fields\n                StartDate = DateTime.Now.AddDays(1).ToString(\"yyyyMMdd\"),\n                EndDate = DateTime.Now.AddDays(365).ToString(\"yyyyMMdd\")\n            };\n\n            campaign.AssetAutomationSettings.AddRange(new[]{\n                new Campaign.Types.AssetAutomationSetting\n                {\n                    AssetAutomationType = AssetAutomationType.GenerateImageExtraction,\n                    AssetAutomationStatus = AssetAutomationStatus.OptedIn\n                },\n                new Campaign.Types.AssetAutomationSetting\n                {\n                    AssetAutomationType = AssetAutomationType.FinalUrlExpansionTextAssetAutomation,\n                    AssetAutomationStatus = AssetAutomationStatus.OptedIn\n                },\n                new Campaign.Types.AssetAutomationSetting\n                {\n                    AssetAutomationType = AssetAutomationType.TextAssetAutomation,\n                    AssetAutomationStatus = AssetAutomationStatus.OptedIn\n                },\n                new Campaign.Types.AssetAutomationSetting\n                {\n                    AssetAutomationType = AssetAutomationType.GenerateEnhancedYoutubeVideos,\n                    AssetAutomationStatus = AssetAutomationStatus.OptedIn\n                },\n                new Campaign.Types.AssetAutomationSetting\n                {\n                    AssetAutomationType = AssetAutomationType.GenerateImageEnhancement,\n                    AssetAutomationStatus = AssetAutomationStatus.OptedIn\n                },\n            });\n\n            MutateOperation operation = new MutateOperation()\n            {\n                CampaignOperation = new CampaignOperation()\n                {\n                    Create = campaign\n                }\n            };\n\n            return operation;\n        }\n\n\n        /// <summary>\n        /// Creates a list of MutateOperations that create new campaign criteria.\n        /// </summary>\n        /// <param name=\"campaignResourceName\">The campaign resource name.</param>\n        /// <returns>A list of MutateOperations that create new campaign criteria.</returns>\n        private List<MutateOperation> CreateCampaignCriterionOperations(\n            string campaignResourceName)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            // Set the LOCATION campaign criteria.\n            // Target all of New York City except Brooklyn.\n            // Location IDs are listed here:\n            // https://developers.google.com/google-ads/api/reference/data/geotargets\n            // and they can also be retrieved using the GeoTargetConstantService as shown\n            // here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting\n            //\n            // We will add one positive location target for New York City (ID=1023191)\n            // and one negative location target for Brooklyn (ID=1022762).\n            // First, add the positive (negative = False) for New York City.\n            MutateOperation operation1 = new MutateOperation()\n            {\n                CampaignCriterionOperation = new CampaignCriterionOperation()\n                {\n                    Create = new CampaignCriterion()\n                    {\n                        Campaign = campaignResourceName,\n                        Location = new LocationInfo()\n                        {\n                            GeoTargetConstant = ResourceNames.GeoTargetConstant(1023191)\n                        },\n\n                        Negative = false\n                    }\n                }\n            };\n\n            operations.Add(operation1);\n\n            // Next add the negative target for Brooklyn.\n            MutateOperation operation2 = new MutateOperation()\n            {\n                CampaignCriterionOperation = new CampaignCriterionOperation()\n                {\n                    Create = new CampaignCriterion()\n                    {\n                        Campaign = campaignResourceName,\n                        Location = new LocationInfo()\n                        {\n                            GeoTargetConstant = ResourceNames.GeoTargetConstant(1022762)\n                        },\n\n                        Negative = true\n                    }\n                }\n            };\n\n            operations.Add(operation2);\n\n            // Set the LANGUAGE campaign criterion.\n            MutateOperation operation3 = new MutateOperation()\n            {\n                CampaignCriterionOperation = new CampaignCriterionOperation()\n                {\n                    Create = new CampaignCriterion()\n                    {\n                        Campaign = campaignResourceName,\n\n                        // Set the language.\n                        // For a list of all language codes, see:\n                        // https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7\n                        Language = new LanguageInfo()\n                        {\n                            LanguageConstant = ResourceNames.LanguageConstant(1000) // English\n                        },\n                    }\n                }\n            };\n\n            operations.Add(operation3);\n\n            return operations;\n        }\n\n\n        /// <summary>\n        /// Creates multiple text assets and returns the list of resource names.\n        /// </summary>\n        /// <param name=\"client\">The Google Ads Client.</param>\n        /// <param name=\"customerId\">The customer's ID.</param>\n        /// <param name=\"texts\">The texts to add.</param>\n        /// <returns>A list of asset resource names.</returns>\n        private List<string> CreateMultipleTextAssets(\n            GoogleAdsClient client,\n            long customerId,\n            string[] texts)\n        {\n            // Get the GoogleAdsService.\n            GoogleAdsServiceClient googleAdsServiceClient =\n                client.GetService(Services.V22.GoogleAdsService);\n\n            MutateGoogleAdsRequest request = new MutateGoogleAdsRequest()\n            {\n                CustomerId = customerId.ToString()\n            };\n\n            foreach (string text in texts)\n            {\n                request.MutateOperations.Add(\n                    new MutateOperation()\n                    {\n                        AssetOperation = new AssetOperation()\n                        {\n                            Create = new Asset()\n                            {\n                                TextAsset = new TextAsset()\n                                {\n                                    Text = text\n                                }\n                            }\n                        }\n                    }\n                );\n            }\n\n            // Send the operations in a single Mutate request.\n            MutateGoogleAdsResponse response = googleAdsServiceClient.Mutate(request);\n\n            List<string> assetResourceNames = new List<string>();\n\n            foreach (MutateOperationResponse operationResponse in response.MutateOperationResponses)\n            {\n                MutateAssetResult assetResult = operationResponse.AssetResult;\n                assetResourceNames.Add(assetResult.ResourceName);\n            }\n\n            PrintResponseDetails(response);\n\n            return assetResourceNames;\n        }\n\n\n        /// <summary>\n        /// Creates a list of MutateOperations that create a new asset_group.\n        /// </summary>\n        /// <param name=\"campaignResourceName\">The campaign resource name.</param>\n        /// <param name=\"assetGroupResourceName\">The asset group resource name.</param>\n        /// <param name=\"headlineAssetResourceNames\">The headline asset resource names.</param>\n        /// <param name=\"descriptionAssetResourceNames\">The description asset resource\n        /// names.</param>\n        /// <param name=\"resourceNameGenerator\">A generator for unique temporary ID's.</param>\n        /// <param name=\"config\">The Google Ads config.</param>\n        /// <param name=\"brandGuidelinesEnabled\">Whether or not to enable brand guidelines.</param>\n        /// <returns>A list of MutateOperations that create the new asset group.</returns>\n        private List<MutateOperation> CreateAssetGroupOperations(\n            string campaignResourceName,\n            string assetGroupResourceName,\n            List<string> headlineAssetResourceNames,\n            List<string> descriptionAssetResourceNames,\n            AssetTemporaryResourceNameGenerator resourceNameGenerator,\n            GoogleAdsConfig config,\n            bool brandGuidelinesEnabled)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            // Create the AssetGroup\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetGroupOperation = new AssetGroupOperation()\n                    {\n                        Create = new AssetGroup()\n                        {\n                            Name = \"Performance Max asset group #\" +\n                                ExampleUtilities.GetRandomString(),\n                            Campaign = campaignResourceName,\n                            FinalUrls = { \"http://www.example.com\" },\n                            FinalMobileUrls = { \"http://www.example.com\" },\n                            Status = AssetGroupStatus.Paused,\n                            ResourceName = assetGroupResourceName\n                        }\n                    }\n                }\n            );\n\n            // For the list of required assets for a Performance Max campaign, see\n            // https://developers.google.com/google-ads/api/docs/performance-max/assets\n\n            // An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n            // and providing:\n            //   the resource name of the AssetGroup\n            //   the resource name of the Asset\n            //   the field_type of the Asset in this AssetGroup.\n            //\n            // To learn more about AssetGroups, see\n            // https://developers.google.com/google-ads/api/docs/performance-max/asset-groups\n\n            // Link the previously created multiple text assets.\n\n            // Link the headline assets.\n            foreach (string resourceName in headlineAssetResourceNames)\n            {\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                        {\n                            Create = new AssetGroupAsset()\n                            {\n                                FieldType = AssetFieldType.Headline,\n                                AssetGroup = assetGroupResourceName,\n                                Asset = resourceName\n                            }\n                        }\n                    }\n                );\n            }\n\n            // Link the description assets.\n            foreach (string resourceName in descriptionAssetResourceNames)\n            {\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                        {\n                            Create = new AssetGroupAsset()\n                            {\n                                FieldType = AssetFieldType.Description,\n                                AssetGroup = assetGroupResourceName,\n                                Asset = resourceName\n                            }\n                        }\n                    }\n                );\n            }\n\n            // Create and link the brand assets.\n            operations.AddRange(\n                CreateAndLinkBrandAssets(\n                    assetGroupResourceName,\n                    campaignResourceName,\n                    resourceNameGenerator,\n                    \"Interplanetary Cruises\",\n                    \"https://gaagl.page.link/bjYi\",\n                    \"Marketing Logo\",\n                    config,\n                    brandGuidelinesEnabled\n                )\n            );\n\n            // Create and link the long headline text asset.\n            operations.AddRange(\n                CreateAndLinkTextAsset(\n                    assetGroupResourceName,\n                    resourceNameGenerator.Next(),\n                    \"Travel the World\",\n                    AssetFieldType.LongHeadline\n                )\n            );\n\n            // Create and link the image assets.\n\n            // Create and link the Marketing Image Asset.\n            operations.AddRange(\n                CreateAndLinkImageAsset(\n                    assetGroupResourceName,\n                    resourceNameGenerator.Next(),\n                    \"https://gaagl.page.link/Eit5\",\n                    AssetFieldType.MarketingImage,\n                    \"Marketing Image\",\n                    config\n                )\n            );\n\n            // Create and link the Square Marketing Image Asset.\n            operations.AddRange(\n                CreateAndLinkImageAsset(\n                    assetGroupResourceName,\n                    resourceNameGenerator.Next(),\n                    \"https://gaagl.page.link/bjYi\",\n                    AssetFieldType.SquareMarketingImage,\n                    \"Square Marketing Image\",\n                    config\n                )\n            );\n\n            return operations;\n        }\n\n\n        /// <summary>\n        /// Creates a list of MutateOperations that create a new linked text asset.\n        /// </summary>\n        /// <param name=\"assetGroupResourceName\">The resource name of the asset group to be\n        /// created.</param>\n        /// <param name=\"assetResourceName\">The resource name of the text asset to be\n        /// created.</param>\n        /// <param name=\"text\">The text of the asset to be created.</param>\n        /// <param name=\"fieldType\">The field type of the asset to be created.</param>\n        /// <returns>A list of MutateOperations that create the new linked text asset.</returns>\n        private List<MutateOperation> CreateAndLinkTextAsset(\n            string assetGroupResourceName,\n            string assetResourceName,\n            string text,\n            AssetFieldType fieldType)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            // Create the Text Asset.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetOperation = new AssetOperation()\n                    {\n                        Create = new Asset()\n                        {\n                            ResourceName = assetResourceName,\n                            TextAsset = new TextAsset()\n                            {\n                                Text = text\n                            }\n                        }\n                    }\n                }\n            );\n\n            // Create an AssetGroupAsset to link the Asset to the AssetGroup.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                    {\n                        Create = new AssetGroupAsset()\n                        {\n                            FieldType = fieldType,\n                            AssetGroup = assetGroupResourceName,\n                            Asset = assetResourceName\n                        }\n                    }\n                }\n            );\n\n            return operations;\n        }\n\n\n        /// <summary>\n        /// Creates a list of MutateOperations that create a new linked image asset.\n        /// </summary>\n        /// <param name=\"assetGroupResourceName\">The resource name of the asset group to be\n        /// created.</param>\n        /// <param name=\"assetResourceName\">The resource name of the text asset to be\n        /// created.</param>\n        /// <param name=\"url\">The url of the image to be retrieved and put into an asset.</param>\n        /// <param name=\"fieldType\">The field type of the asset to be created.</param>\n        /// <param name=\"assetName\">The asset name.</param>\n        /// <param name=\"config\">The Google Ads Config.</param>\n        /// <returns>A list of MutateOperations that create a new linked image asset.</returns>\n        private List<MutateOperation> CreateAndLinkImageAsset(\n            string assetGroupResourceName,\n            string assetResourceName,\n            string url,\n            AssetFieldType fieldType,\n            string assetName, GoogleAdsConfig config)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            // Create the Image Asset.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetOperation = new AssetOperation()\n                    {\n                        Create = new Asset()\n                        {\n                            ResourceName = assetResourceName,\n                            ImageAsset = new ImageAsset()\n                            {\n                                Data =\n                                    ByteString.CopyFrom(\n                                        MediaUtilities.GetAssetDataFromUrl(url, config)\n                                    )\n                            },\n                            // Provide a unique friendly name to identify your asset.\n                            // When there is an existing image asset with the same content but a\n                            // different name, the new name will be dropped silently.\n                            Name = assetName\n                        }\n                    }\n                }\n            );\n\n            // Create an AssetGroupAsset to link the Asset to the AssetGroup.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                    {\n                        Create = new AssetGroupAsset()\n                        {\n                            FieldType = fieldType,\n                            AssetGroup = assetGroupResourceName,\n                            Asset = assetResourceName\n                        }\n                    }\n                }\n            );\n\n            return operations;\n        }\n\n\n        /// <summary>\n        /// Creates a list of MutateOperations that create and link the brand assets.\n        /// </summary>\n        /// <param name=\"assetGroupResourceName\">The resource name of the asset group to link assets\n        /// to.</param>\n        /// <param name=\"campaignResourceName\">The resource name of the campaign to link assets\n        /// to.</param>\n        /// <param name=\"assetResourceNameGenerator\">The resource name generator of the assets to be\n        /// created.</param>\n        /// <param name=\"businessName\">The business name text to be put into an asset.</param>\n        /// <param name=\"logoUrl\">The url of the logo to be retrieved and put into an asset.</param>\n        /// <param name=\"logoName\">The asset name of the logo.</param>\n        /// <param name=\"config\">The Google Ads Config.</param>\n        /// <param name=\"brandGuidelinesEnabled\">Whether or not to enable brand guidelines.</param>\n        /// <returns>A list of MutateOperations that create a new linked image asset.</returns>\n        private List<MutateOperation> CreateAndLinkBrandAssets(\n            string assetGroupResourceName,\n            string campaignResourceName,\n            AssetTemporaryResourceNameGenerator assetResourceNameGenerator,\n            string businessName,\n            string logoUrl,\n            string logoName,\n            GoogleAdsConfig config,\n            bool brandGuidelinesEnabled)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            string logoAssetResourceName = assetResourceNameGenerator.Next();\n            string businessNameAssetResourceName = assetResourceNameGenerator.Next();\n\n            // Create the Image Asset.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetOperation = new AssetOperation()\n                    {\n                        Create = new Asset()\n                        {\n                            ResourceName = logoAssetResourceName,\n                            ImageAsset = new ImageAsset()\n                            {\n                                Data =\n                                    ByteString.CopyFrom(\n                                        MediaUtilities.GetAssetDataFromUrl(logoUrl, config)\n                                    )\n                            },\n                            // Provide a unique friendly name to identify your asset.\n                            // When there is an existing image asset with the same content but a\n                            // different name, the new name will be dropped silently.\n                            Name = logoName\n                        }\n                    }\n                }\n            );\n\n            // Create the business name asset.\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetOperation = new AssetOperation()\n                    {\n                        Create = new Asset()\n                        {\n                            ResourceName = businessNameAssetResourceName,\n                            TextAsset = new TextAsset()\n                            {\n                                Text = businessName,\n                            }\n                        }\n                    }\n                }\n            );\n\n            if (brandGuidelinesEnabled)\n            {\n                // Create CampaignAssets to link the Assets to the Campaign.\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        CampaignAssetOperation = new CampaignAssetOperation()\n                        {\n                            Create = new CampaignAsset()\n                            {\n                                FieldType = AssetFieldType.Logo,\n                                Campaign = campaignResourceName,\n                                Asset = logoAssetResourceName\n                            }\n                        }\n                    }\n                );\n\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        CampaignAssetOperation = new CampaignAssetOperation()\n                        {\n                            Create = new CampaignAsset()\n                            {\n                                FieldType = AssetFieldType.BusinessName,\n                                Campaign = campaignResourceName,\n                                Asset = businessNameAssetResourceName\n                            }\n                        }\n                    }\n                );\n            } else {\n                // Create AssetGroupAssets to link the Assets to the AssetGroup.\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                        {\n                            Create = new AssetGroupAsset()\n                            {\n                                FieldType = AssetFieldType.Logo,\n                                AssetGroup = assetGroupResourceName,\n                                Asset = logoAssetResourceName\n                            }\n                        }\n                    }\n                );\n\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        AssetGroupAssetOperation = new AssetGroupAssetOperation()\n                        {\n                            Create = new AssetGroupAsset()\n                            {\n                                FieldType = AssetFieldType.BusinessName,\n                                AssetGroup = assetGroupResourceName,\n                                Asset = businessNameAssetResourceName\n                            }\n                        }\n                    }\n                );\n\n            }\n\n\n            return operations;\n        }\n\n        /// <summary>\n        /// Creates a list of MutateOperations that may create AssetGroupSignals\n        /// </summary>\n        /// <param name=\"customerId\">The customer ID.</param>\n        /// <param name=\"assetGroupResourceName\">The resource name of the asset group to be\n        /// created.</param>\n        /// <param name=\"audienceId\">The optional audience ID.</param>\n        /// <returns>A list of MutateOperations that create may create AssetGroupSignals.</returns>\n        private List<MutateOperation> CreateAssetGroupSignalOperations(\n            long customerId,\n            string assetGroupResourceName,\n            long? audienceId)\n        {\n            List<MutateOperation> operations = new List<MutateOperation>();\n\n            if (audienceId.HasValue)\n            {\n                // Create an audience asset group signal.\n                // To learn more about Audience Signals, see\n                // https://developers.google.com/google-ads/api/docs/performance-max/asset-groups#audience_signals\n                operations.Add(\n                    new MutateOperation()\n                    {\n                        AssetGroupSignalOperation = new AssetGroupSignalOperation()\n                        {\n                            Create = new AssetGroupSignal()\n                            {\n                                AssetGroup = assetGroupResourceName,\n                                Audience = new AudienceInfo()\n                                {\n                                    Audience = ResourceNames.Audience(customerId, audienceId.Value)\n                                }\n                            }\n                        }\n                    }\n                );\n            }\n\n            // Create a search theme asset group signal.\n            // To learn more about Search Themes Signals, see:\n            // https://developers.google.com/google-ads/api/performance-max/asset-group-signals#search_themes\n            operations.Add(\n                new MutateOperation()\n                {\n                    AssetGroupSignalOperation = new AssetGroupSignalOperation()\n                    {\n                        Create = new AssetGroupSignal()\n                        {\n                            AssetGroup = assetGroupResourceName,\n                            SearchTheme = new SearchThemeInfo()\n                            {\n                                Text = \"travel\"\n                            }\n                        }\n                    }\n                }\n            );\n\n            return operations;\n        }\n\n        /// <summary>\n        /// Prints the details of a MutateGoogleAdsResponse. Parses the \"response\" oneof field name\n        /// and uses it to extract the new entity's name and resource name.\n        /// </summary>\n        /// <param name=\"response\">A MutateGoogleAdsResponse instance.</param>\n        private void PrintResponseDetails(MutateGoogleAdsResponse response)\n        {\n            // Parse the Mutate response to print details about the entities that were created\n            // in the request.\n            foreach (MutateOperationResponse operationResponse in response.MutateOperationResponses)\n            {\n                string entityName = operationResponse.ResponseCase.ToString();\n                // Trim the substring \"Result\" from the end of the entity name.\n                entityName = entityName.Remove(entityName.Length - 6);\n\n                string resourceName;\n                switch (operationResponse.ResponseCase)\n                {\n                    case MutateOperationResponse.ResponseOneofCase.AdGroupResult:\n                        resourceName = operationResponse.AdGroupResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.AdGroupAdResult:\n                        resourceName = operationResponse.AdGroupAdResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.CampaignResult:\n                        resourceName = operationResponse.CampaignResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.CampaignBudgetResult:\n                        resourceName = operationResponse.CampaignBudgetResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.CampaignCriterionResult:\n                        resourceName = operationResponse.CampaignCriterionResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.SmartCampaignSettingResult:\n                        resourceName = operationResponse.SmartCampaignSettingResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.AssetResult:\n                        resourceName = operationResponse.AssetResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.AssetGroupResult:\n                        resourceName = operationResponse.AssetGroupResult.ResourceName;\n                        break;\n\n                    case MutateOperationResponse.ResponseOneofCase.AssetGroupAssetResult:\n                        resourceName = operationResponse.AssetGroupAssetResult.ResourceName;\n                        break;\n\n                    default:\n                        resourceName = \"<not found>\";\n                        break;\n                }\n\n                Console.WriteLine(\n                    $\"Created a(n) {entityName} with resource name: '{resourceName}'.\");\n            }\n        }\n    }\n}AddPerformanceMaxCampaign.cs",
    "<?php\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nnamespace Google\\Ads\\GoogleAds\\Examples\\AdvancedOperations;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\nuse GetOpt\\GetOpt;\nuse Google\\Ads\\GoogleAds\\Examples\\Utils\\ArgumentNames;\nuse Google\\Ads\\GoogleAds\\Examples\\Utils\\ArgumentParser;\nuse Google\\Ads\\GoogleAds\\Examples\\Utils\\Helper;\nuse Google\\Ads\\GoogleAds\\Lib\\OAuth2TokenBuilder;\nuse Google\\Ads\\GoogleAds\\Lib\\V22\\GoogleAdsClient;\nuse Google\\Ads\\GoogleAds\\Lib\\V22\\GoogleAdsClientBuilder;\nuse Google\\Ads\\GoogleAds\\Lib\\V22\\GoogleAdsException;\nuse Google\\Ads\\GoogleAds\\Util\\V22\\ResourceNames;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\AudienceInfo;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\ImageAsset;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\LanguageInfo;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\LocationInfo;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\MaximizeConversionValue;\nuse Google\\Ads\\GoogleAds\\V22\\Common\\TextAsset;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\AssetAutomationTypeEnum\\AssetAutomationType;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\AssetAutomationStatusEnum\\AssetAutomationStatus;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\AdvertisingChannelTypeEnum\\AdvertisingChannelType;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\AssetFieldTypeEnum\\AssetFieldType;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\AssetGroupStatusEnum\\AssetGroupStatus;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\BudgetDeliveryMethodEnum\\BudgetDeliveryMethod;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\CampaignStatusEnum\\CampaignStatus;\nuse Google\\Ads\\GoogleAds\\V22\\Enums\\EuPoliticalAdvertisingStatusEnum\\EuPoliticalAdvertisingStatus;\nuse Google\\Ads\\GoogleAds\\V22\\Errors\\GoogleAdsError;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\Asset;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\AssetGroup;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\AssetGroupAsset;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\AssetGroupSignal;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\Campaign;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\Campaign\\AssetAutomationSetting;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\CampaignAsset;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\CampaignBudget;\nuse Google\\Ads\\GoogleAds\\V22\\Resources\\CampaignCriterion;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\AssetGroupAssetOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\AssetGroupOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\AssetGroupSignalOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\AssetOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\CampaignAssetOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\CampaignBudgetOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\CampaignCriterionOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\CampaignOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\MutateGoogleAdsRequest;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\MutateGoogleAdsResponse;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\MutateOperation;\nuse Google\\Ads\\GoogleAds\\V22\\Services\\MutateOperationResponse;\nuse Google\\ApiCore\\ApiException;\nuse Google\\ApiCore\\Serializer;\n\n/**\n * This example shows how to create a Performance Max campaign.\n *\n * For more information about Performance Max campaigns, see\n * https://developers.google.com/google-ads/api/docs/performance-max/overview.\n *\n * Prerequisites:\n * - You must have at least one conversion action in the account. For more about conversion actions,\n * see\n * https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions.\n *\n * This example uses the default customer conversion goals. For an example of setting\n * campaign-specific conversion goals, see ShoppingAds/AddPerformanceMaxRetailCampaign.php.\n */\nclass AddPerformanceMaxCampaign\n{\n    private const CUSTOMER_ID = 'INSERT_CUSTOMER_ID_HERE';\n    // Optional: An audience ID to use to improve the targeting of the Performance Max campaign.\n    private const AUDIENCE_ID = null;\n    // Optional: Indicates whether the created campaign is enabled for brand guidelines.\n    private const BRAND_GUIDELINES_ENABLED = false;\n\n    // We specify temporary IDs that are specific to a single mutate request.\n    // Temporary IDs are always negative and unique within one mutate request.\n    //\n    // See https://developers.google.com/google-ads/api/docs/mutating/best-practices\n    // for further details.\n    //\n    // These temporary IDs are fixed because they are used in multiple places.\n    private const BUDGET_TEMPORARY_ID = -1;\n    private const PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID = -2;\n    private const ASSET_GROUP_TEMPORARY_ID = -3;\n\n    // There are also entities that will be created in the same request but do not need to be fixed\n    // temporary IDs because they are referenced only once.\n    /** @var int the negative temporary ID used in bulk mutates. */\n    private static $nextTempId = self::ASSET_GROUP_TEMPORARY_ID - 1;\n\n    public static function main()\n    {\n        // Either pass the required parameters for this example on the command line, or insert them\n        // into the constants above.\n        $options = (new ArgumentParser())->parseCommandArguments([\n            ArgumentNames::CUSTOMER_ID => GetOpt::REQUIRED_ARGUMENT,\n            ArgumentNames::AUDIENCE_ID => GetOpt::OPTIONAL_ARGUMENT,\n            ArgumentNames::BRAND_GUIDELINES_ENABLED => GetOpt::OPTIONAL_ARGUMENT\n        ]);\n\n        // Generate a refreshable OAuth2 credential for authentication.\n        $oAuth2Credential = (new OAuth2TokenBuilder())->fromFile()->build();\n\n        // Construct a Google Ads client configured from a properties file and the\n        // OAuth2 credentials above.\n        $googleAdsClient = (new GoogleAdsClientBuilder())\n            ->fromFile()\n            ->withOAuth2Credential($oAuth2Credential)\n            ->build();\n\n        try {\n            self::runExample(\n                $googleAdsClient,\n                $options[ArgumentNames::CUSTOMER_ID] ?: self::CUSTOMER_ID,\n                $options[ArgumentNames::AUDIENCE_ID] ?: self::AUDIENCE_ID,\n                filter_var(\n                    $options[ArgumentNames::BRAND_GUIDELINES_ENABLED]\n                        ?: self::BRAND_GUIDELINES_ENABLED,\n                    FILTER_VALIDATE_BOOLEAN\n                )\n            );\n        } catch (GoogleAdsException $googleAdsException) {\n            printf(\n                \"Request with ID '%s' has failed.%sGoogle Ads failure details:%s\",\n                $googleAdsException->getRequestId(),\n                PHP_EOL,\n                PHP_EOL\n            );\n            foreach ($googleAdsException->getGoogleAdsFailure()->getErrors() as $error) {\n                /** @var GoogleAdsError $error */\n                printf(\n                    \"\\t%s: %s%s\",\n                    $error->getErrorCode()->getErrorCode(),\n                    $error->getMessage(),\n                    PHP_EOL\n                );\n            }\n            exit(1);\n        } catch (ApiException $apiException) {\n            printf(\n                \"ApiException was thrown with message '%s'.%s\",\n                $apiException->getMessage(),\n                PHP_EOL\n            );\n            exit(1);\n        }\n    }\n\n    /**\n     * Runs the example.\n     *\n     * @param GoogleAdsClient $googleAdsClient the Google Ads API client\n     * @param int $customerId the customer ID\n     * @param int|null $audienceId the audience ID\n     * @param bool $brandGuidelinesEnabled whether the created campaign will be enabled for brand\n     *     guidelines\n     */\n    public static function runExample(\n        GoogleAdsClient $googleAdsClient,\n        int $customerId,\n        ?int $audienceId,\n        bool $brandGuidelinesEnabled\n    ) {\n        // Performance Max campaigns require that repeated assets such as headlines\n        // and descriptions be created before the campaign.\n        // For the list of required assets for a Performance Max campaign, see\n        // https://developers.google.com/google-ads/api/docs/performance-max/assets.\n        //\n        // Creates the headlines.\n        $headlineAssetResourceNames = self::createMultipleTextAssets(\n            $googleAdsClient,\n            $customerId,\n            [\"Travel\", \"Travel Reviews\", \"Book travel\"]\n        );\n        // Creates the descriptions.\n        $descriptionAssetResourceNames = self::createMultipleTextAssets(\n            $googleAdsClient,\n            $customerId,\n            [\"Take to the air!\", \"Fly to the sky!\"]\n        );\n\n        // It's important to create the below entities in this order because they depend on\n        // each other.\n        $operations = [];\n        // The below methods create and return MutateOperations that we later\n        // provide to the GoogleAdsService.Mutate method in order to create the\n        // entities in a single request. Since the entities for a Performance Max\n        // campaign are closely tied to one-another, it's considered a best practice\n        // to create them in a single Mutate request so they all complete\n        // successfully or fail entirely, leaving no orphaned entities. See:\n        // https://developers.google.com/google-ads/api/docs/mutating/overview.\n        $operations[] = self::createCampaignBudgetOperation($customerId);\n        $operations[] =\n            self::createPerformanceMaxCampaignOperation($customerId, $brandGuidelinesEnabled);\n        $operations =\n            array_merge($operations, self::createCampaignCriterionOperations($customerId));\n        $operations = array_merge($operations, self::createAssetGroupOperations(\n            $customerId,\n            $headlineAssetResourceNames,\n            $descriptionAssetResourceNames,\n            $brandGuidelinesEnabled\n        ));\n        $operations = array_merge($operations, self::createAssetGroupSignalOperations(\n            $customerId,\n            ResourceNames::forAssetGroup($customerId, self::ASSET_GROUP_TEMPORARY_ID),\n            $audienceId\n        ));\n\n        // Issues a mutate request to create everything and prints its information.\n        $googleAdsServiceClient = $googleAdsClient->getGoogleAdsServiceClient();\n        $response = $googleAdsServiceClient->mutate(MutateGoogleAdsRequest::build(\n            $customerId,\n            $operations\n        ));\n\n        self::printResponseDetails($response);\n    }\n\n    /**\n     * Creates a MutateOperation that creates a new CampaignBudget.\n     *\n     * A temporary ID will be assigned to this campaign budget so that it can be\n     * referenced by other objects being created in the same Mutate request.\n     *\n     * @param int $customerId the customer ID\n     * @return MutateOperation the mutate operation that creates a campaign budget\n     */\n    private static function createCampaignBudgetOperation(int $customerId): MutateOperation\n    {\n        // Creates a mutate operation that creates a campaign budget operation.\n        return new MutateOperation([\n            'campaign_budget_operation' => new CampaignBudgetOperation([\n                'create' => new CampaignBudget([\n                    // Sets a temporary ID in the budget's resource name so it can be referenced\n                    // by the campaign in later steps.\n                    'resource_name' => ResourceNames::forCampaignBudget(\n                        $customerId,\n                        self::BUDGET_TEMPORARY_ID\n                    ),\n                    'name' => 'Performance Max campaign budget #' . Helper::getPrintableDatetime(),\n                    // The budget period already defaults to DAILY.\n                    'amount_micros' => 50000000,\n                    'delivery_method' => BudgetDeliveryMethod::STANDARD,\n                    // A Performance Max campaign cannot use a shared campaign budget.\n                    'explicitly_shared' => false\n                ])\n            ])\n        ]);\n    }\n\n    /**\n     * Creates a MutateOperation that creates a new Performance Max campaign.\n     *\n     * A temporary ID will be assigned to this campaign so that it can\n     * be referenced by other objects being created in the same Mutate request.\n     *\n     * @param int $customerId the customer ID\n     * @param bool $brandGuidelinesEnabled whether the created campaign will be enabled for brand\n     *     guidelines\n     * @return MutateOperation the mutate operation that creates the campaign\n     */\n    private static function createPerformanceMaxCampaignOperation(\n        int $customerId,\n        bool $brandGuidelinesEnabled\n    ): MutateOperation {\n        // Creates a mutate operation that creates a campaign operation.\n        return new MutateOperation([\n            'campaign_operation' => new CampaignOperation([\n                'create' => new Campaign([\n                    'name' => 'Performance Max campaign #' . Helper::getPrintableDatetime(),\n                    // Assigns the resource name with a temporary ID.\n                    'resource_name' => ResourceNames::forCampaign(\n                        $customerId,\n                        self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                    ),\n                    // Sets the budget using the given budget resource name.\n                    'campaign_budget' => ResourceNames::forCampaignBudget(\n                        $customerId,\n                        self::BUDGET_TEMPORARY_ID\n                    ),\n                    // The campaign is the only entity in the mutate request that should have its\n                    // status set.\n                    // Recommendation: Set the campaign to PAUSED when creating it to prevent\n                    // the ads from immediately serving.\n                    'status' => CampaignStatus::PAUSED,\n                    // All Performance Max campaigns have an advertising_channel_type of\n                    // PERFORMANCE_MAX. The advertising_channel_sub_type should not be set.\n                    'advertising_channel_type' => AdvertisingChannelType::PERFORMANCE_MAX,\n\n                    // Bidding strategy must be set directly on the campaign.\n                    // Setting a portfolio bidding strategy by resource name is not supported.\n                    // Max Conversion and Maximize Conversion Value are the only strategies\n                    // supported for Performance Max campaigns.\n                    // An optional ROAS (Return on Advertising Spend) can be set for\n                    // maximize_conversion_value. The ROAS value must be specified as a ratio in\n                    // the API. It is calculated by dividing \"total value\" by \"total spend\".\n                    // For more information on Maximize Conversion Value, see the support\n                    // article: http://support.google.com/google-ads/answer/7684216.\n                    // A target_roas of 3.5 corresponds to a 350% return on ad spend.\n                    'maximize_conversion_value' => new MaximizeConversionValue([\n                        'target_roas' => 3.5\n                    ]),\n\n                    'asset_automation_settings' => [\n                        new AssetAutomationSetting([\n                            'asset_automation_type' => AssetAutomationType::TEXT_ASSET_AUTOMATION,\n                            'asset_automation_status' => AssetAutomationStatus::OPTED_IN\n                        ]),\n                        new AssetAutomationSetting([\n                            'asset_automation_type' => AssetAutomationType::URL_EXPANSION,\n                            'asset_automation_status' => AssetAutomationStatus::OPTED_IN\n                        ])\n                    ],\n\n\n                    // Sets if the campaign is enabled for brand guidelines. For more information\n                    // on brand guidelines, see\n                    // https://support.google.com/google-ads/answer/14934472.\n                    'brand_guidelines_enabled' => $brandGuidelinesEnabled,\n\n                    // Declare whether or not this campaign serves political ads targeting the EU.\n                    'contains_eu_political_advertising' =>\n                        EuPoliticalAdvertisingStatus::DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING,\n\n                    // Optional fields.\n                    'start_date' => date('Ymd', strtotime('+1 day')),\n                    'end_date' => date('Ymd', strtotime('+365 days'))\n                ])\n            ])\n        ]);\n    }\n\n    /**\n     * Creates a list of MutateOperations that create new campaign criteria.\n     *\n     * @param int $customerId the customer ID\n     * @return MutateOperation[] a list of MutateOperations that create the new campaign criteria\n     */\n    private static function createCampaignCriterionOperations(int $customerId): array\n    {\n        $operations = [];\n        // Set the LOCATION campaign criteria.\n        // Target all of New York City except Brooklyn.\n        // Location IDs are listed here:\n        // https://developers.google.com/google-ads/api/reference/data/geotargets\n        // and they can also be retrieved using the GeoTargetConstantService as shown\n        // here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting\n        //\n        // We will add one positive location target for New York City (ID=1023191)\n        // and one negative location target for Brooklyn (ID=1022762).\n        // First, adds the positive (negative = false) for New York City.\n        $operations[] = new MutateOperation([\n            'campaign_criterion_operation' => new CampaignCriterionOperation([\n                'create' => new CampaignCriterion([\n                    'campaign' => ResourceNames::forCampaign(\n                        $customerId,\n                        self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                    ),\n                    'location' => new LocationInfo([\n                        'geo_target_constant' => ResourceNames::forGeoTargetConstant(1023191)\n                    ]),\n                    'negative' => false\n                ])\n            ])\n        ]);\n\n        // Next adds the negative target for Brooklyn.\n        $operations[] = new MutateOperation([\n            'campaign_criterion_operation' => new CampaignCriterionOperation([\n                'create' => new CampaignCriterion([\n                    'campaign' => ResourceNames::forCampaign(\n                        $customerId,\n                        self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                    ),\n                    'location' => new LocationInfo([\n                        'geo_target_constant' => ResourceNames::forGeoTargetConstant(1022762)\n                    ]),\n                    'negative' => true\n                ])\n            ])\n        ]);\n\n        // Sets the LANGUAGE campaign criterion.\n        $operations[] = new MutateOperation([\n            'campaign_criterion_operation' => new CampaignCriterionOperation([\n                'create' => new CampaignCriterion([\n                    'campaign' => ResourceNames::forCampaign(\n                        $customerId,\n                        self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                    ),\n                    // Set the language.\n                    // For a list of all language codes, see:\n                    // https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7\n                    'language' => new LanguageInfo([\n                        'language_constant' => ResourceNames::forLanguageConstant(1000)  // English\n                    ])\n                ])\n            ])\n        ]);\n\n        return $operations;\n    }\n\n    /**\n     * Creates multiple text assets and returns the list of resource names.\n     *\n     * @param GoogleAdsClient $googleAdsClient the Google Ads API client\n     * @param int $customerId the customer ID\n     * @param string[] $texts a list of strings, each of which will be used to create a text asset\n     * @return string[] a list of asset resource names\n     */\n    private static function createMultipleTextAssets(\n        GoogleAdsClient $googleAdsClient,\n        int $customerId,\n        array $texts\n    ): array {\n        // Here again, we use the GoogleAdService to create multiple text assets in a single\n        // request.\n        $operations = [];\n        foreach ($texts as $text) {\n            // Creates a mutate operation for a text asset.\n            $operations[] = new MutateOperation([\n                'asset_operation' => new AssetOperation([\n                    'create' => new Asset(['text_asset' => new TextAsset(['text' => $text])])\n                ])\n            ]);\n        }\n\n        // Issues a mutate request to add all assets.\n        $googleAdsService = $googleAdsClient->getGoogleAdsServiceClient();\n        /** @var MutateGoogleAdsResponse $mutateGoogleAdsResponse */\n        $mutateGoogleAdsResponse =\n            $googleAdsService->mutate(MutateGoogleAdsRequest::build($customerId, $operations));\n\n        $assetResourceNames = [];\n        foreach ($mutateGoogleAdsResponse->getMutateOperationResponses() as $response) {\n            /** @var MutateOperationResponse $response */\n            $assetResourceNames[] = $response->getAssetResult()->getResourceName();\n        }\n        self::printResponseDetails($mutateGoogleAdsResponse);\n\n        return $assetResourceNames;\n    }\n\n    /**\n     * Creates a list of MutateOperations that create a new asset group.\n     *\n     * A temporary ID will be assigned to this asset group so that it can\n     * be referenced by other objects being created in the same Mutate request.\n     *\n     * @param int $customerId the customer ID\n     * @param string[] $headlineAssetResourceNames a list of headline resource names\n     * @param string[] $descriptionAssetResourceNames a list of description resource names\n     * @param bool $brandGuidelinesEnabled whether the created campaign will be enabled for brand\n     *     guidelines\n     * @return MutateOperation[] a list of MutateOperations that create new asset group\n     */\n    private static function createAssetGroupOperations(\n        int $customerId,\n        array $headlineAssetResourceNames,\n        array $descriptionAssetResourceNames,\n        bool $brandGuidelinesEnabled\n    ): array {\n        $operations = [];\n        // Creates a new mutate operation that creates an asset group operation.\n        $operations[] = new MutateOperation([\n            'asset_group_operation' => new AssetGroupOperation([\n                'create' => new AssetGroup([\n                    'resource_name' => ResourceNames::forAssetGroup(\n                        $customerId,\n                        self::ASSET_GROUP_TEMPORARY_ID\n                    ),\n                    'name' => 'Performance Max asset group #' . Helper::getPrintableDatetime(),\n                    'campaign' => ResourceNames::forCampaign(\n                        $customerId,\n                        self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                    ),\n                    'final_urls' => ['http://www.example.com'],\n                    'final_mobile_urls' => ['http://www.example.com'],\n                    'status' => AssetGroupStatus::PAUSED\n                ])\n            ])\n        ]);\n\n        // For the list of required assets for a Performance Max campaign, see\n        // https://developers.google.com/google-ads/api/docs/performance-max/assets\n\n        // An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n        // and providing:\n        // -  the resource name of the AssetGroup\n        // -  the resource name of the Asset\n        // -  the field_type of the Asset in this AssetGroup\n        //\n        // To learn more about AssetGroups, see\n        // https://developers.google.com/google-ads/api/docs/performance-max/asset-groups.\n\n        // Links the previously created multiple text assets.\n\n        // Links the headline assets.\n        foreach ($headlineAssetResourceNames as $resourceName) {\n            $operations[] = new MutateOperation([\n                'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                    'create' => new AssetGroupAsset([\n                        'asset' => $resourceName,\n                        'asset_group' => ResourceNames::forAssetGroup(\n                            $customerId,\n                            self::ASSET_GROUP_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::HEADLINE\n                    ])\n                ])\n            ]);\n        }\n        // Links the description assets.\n        foreach ($descriptionAssetResourceNames as $resourceName) {\n            $operations[] = new MutateOperation([\n                'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                    'create' => new AssetGroupAsset([\n                        'asset' => $resourceName,\n                        'asset_group' => ResourceNames::forAssetGroup(\n                            $customerId,\n                            self::ASSET_GROUP_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::DESCRIPTION\n                    ])\n                ])\n            ]);\n        }\n\n        // Creates and links the long headline text asset.\n        $operations = array_merge($operations, self::createAndLinkTextAsset(\n            $customerId,\n            'Travel the World',\n            AssetFieldType::LONG_HEADLINE\n        ));\n        // Creates and links the business name text asset.\n        $operations = array_merge($operations, self::createAndLinkBrandAssets(\n            $customerId,\n            $brandGuidelinesEnabled,\n            'Interplanetary Cruises',\n            'https://gaagl.page.link/bjYi',\n            'Marketing Logo'\n        ));\n\n        // Creates and links the image assets.\n\n        // Creates and links the Marketing Image Asset.\n        $operations = array_merge($operations, self::createAndLinkImageAsset(\n            $customerId,\n            'https://gaagl.page.link/Eit5',\n            AssetFieldType::MARKETING_IMAGE,\n            'Marketing Image'\n        ));\n        // Creates and links the Square Marketing Image Asset.\n        $operations = array_merge($operations, self::createAndLinkImageAsset(\n            $customerId,\n            'https://gaagl.page.link/bjYi',\n            AssetFieldType::SQUARE_MARKETING_IMAGE,\n            'Square Marketing Image'\n        ));\n\n        return $operations;\n    }\n\n    /**\n     * Creates a list of MutateOperations that create a new linked text asset.\n     *\n     * @param int $customerId the customer ID\n     * @param string $text the text of the asset to be created\n     * @param int $fieldType the field type of the new asset in the AssetGroupAsset\n     * @return MutateOperation[] a list of MutateOperations that create a new linked text asset\n     */\n    private static function createAndLinkTextAsset(\n        int $customerId,\n        string $text,\n        int $fieldType\n    ): array {\n        $operations = [];\n        // Creates a new mutate operation that creates a text asset.\n        $operations[] = new MutateOperation([\n            'asset_operation' => new AssetOperation([\n                'create' => new Asset([\n                    'resource_name' => ResourceNames::forAsset($customerId, self::$nextTempId),\n                    'text_asset' => new TextAsset(['text' => $text])\n                ])\n            ])\n        ]);\n\n        // Creates an asset group asset to link the asset to the asset group.\n        $operations[] = new MutateOperation([\n            'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                'create' => new AssetGroupAsset([\n                    'asset' => ResourceNames::forAsset($customerId, self::$nextTempId),\n                    'asset_group' => ResourceNames::forAssetGroup(\n                        $customerId,\n                        self::ASSET_GROUP_TEMPORARY_ID\n                    ),\n                    'field_type' => $fieldType\n                ])\n            ])\n        ]);\n        self::$nextTempId--;\n\n        return $operations;\n    }\n\n    /**\n     * Creates a list of MutateOperations that create a new linked image asset.\n     *\n     * @param int $customerId the customer ID\n     * @param string $url the URL of the image to be retrieved and put into an asset\n     * @param int $fieldType the field type of the new asset in the AssetGroupAsset\n     * @param string $assetName the asset name\n     * @return MutateOperation[] a list of MutateOperations that create a new linked image asset\n     */\n    private static function createAndLinkImageAsset(\n        int $customerId,\n        string $url,\n        int $fieldType,\n        string $assetName\n    ): array {\n        $operations = [];\n        // Creates a new mutate operation that creates an image asset.\n        $operations[] = new MutateOperation([\n            'asset_operation' => new AssetOperation([\n                'create' => new Asset([\n                    'resource_name' => ResourceNames::forAsset($customerId, self::$nextTempId),\n                    // Provide a unique friendly name to identify your asset.\n                    // When there is an existing image asset with the same content but a different\n                    // name, the new name will be dropped silently.\n                    'name' => $assetName,\n                    'image_asset' => new ImageAsset(['data' => file_get_contents($url)])\n                ])\n            ])\n        ]);\n\n        // Creates an asset group asset to link the asset to the asset group.\n        $operations[] = new MutateOperation([\n            'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                'create' => new AssetGroupAsset([\n                    'asset' => ResourceNames::forAsset($customerId, self::$nextTempId),\n                    'asset_group' => ResourceNames::forAssetGroup(\n                        $customerId,\n                        self::ASSET_GROUP_TEMPORARY_ID\n                    ),\n                    'field_type' => $fieldType\n                ])\n            ])\n        ]);\n        self::$nextTempId--;\n\n        return $operations;\n    }\n\n\n    /**\n     * Creates a list of MutateOperations that create linked brand assets.\n     *\n     * @param int $customerId the customer ID\n     * @param bool $brandGuidelinesEnabled whether the created campaign will be enabled for brand\n     *     guidelines\n     * @param string $businessName the business name text to be put into an asset\n     * @param string $logoUrl the URL of the logo to be retrieved and put into an asset\n     * @param string $logoName the asset name of the logo\n     * @return MutateOperation[] a list of MutateOperations that create a new linked text asset\n     */\n    private static function createAndLinkBrandAssets(\n        int $customerId,\n        bool $brandGuidelinesEnabled,\n        string $businessName,\n        string $logoUrl,\n        string $logoName\n    ): array {\n        $operations = [];\n        // Creates a new mutate operation that creates a text asset.\n        $businessNameTempId = self::$nextTempId--;\n        $operations[] = new MutateOperation([\n            'asset_operation' => new AssetOperation([\n                'create' => new Asset([\n                    'resource_name' => ResourceNames::forAsset($customerId, $businessNameTempId),\n                    'text_asset' => new TextAsset(['text' => $businessName])\n                ])\n            ])\n        ]);\n\n        $logoTempId = self::$nextTempId--;\n        // Creates a new mutate operation that creates an image asset.\n        $operations[] = new MutateOperation([\n            'asset_operation' => new AssetOperation([\n                'create' => new Asset([\n                    'resource_name' => ResourceNames::forAsset($customerId, $logoTempId),\n                    // Provide a unique friendly name to identify your asset.\n                    // When there is an existing image asset with the same content but a different\n                    // name, the new name will be dropped silently.\n                    'name' => $logoName,\n                    'image_asset' => new ImageAsset(['data' => file_get_contents($logoUrl)])\n                ])\n            ])\n        ]);\n\n        if ($brandGuidelinesEnabled) {\n            // Creates a campaign asset to link the business name and logo assets to the campaign.\n            $operations[] = new MutateOperation([\n                'campaign_asset_operation' => new CampaignAssetOperation([\n                    'create' => new CampaignAsset([\n                        'asset' => ResourceNames::forAsset($customerId, $businessNameTempId),\n                        'campaign' => ResourceNames::forCampaign(\n                            $customerId,\n                            self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::BUSINESS_NAME\n                    ])\n                ])\n            ]);\n            $operations[] = new MutateOperation([\n                'campaign_asset_operation' => new CampaignAssetOperation([\n                    'create' => new CampaignAsset([\n                        'asset' => ResourceNames::forAsset($customerId, $logoTempId),\n                        'campaign' => ResourceNames::forCampaign(\n                            $customerId,\n                            self::PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::LOGO\n                    ])\n                ])\n            ]);\n        } else {\n            // Creates an asset group asset to link the business name and logo assets to the asset\n            // group.\n            $operations[] = new MutateOperation([\n                'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                    'create' => new AssetGroupAsset([\n                        'asset' => ResourceNames::forAsset($customerId, $businessNameTempId),\n                        'asset_group' => ResourceNames::forAssetGroup(\n                            $customerId,\n                            self::ASSET_GROUP_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::BUSINESS_NAME\n                    ])\n                ])\n            ]);\n            $operations[] = new MutateOperation([\n                'asset_group_asset_operation' => new AssetGroupAssetOperation([\n                    'create' => new AssetGroupAsset([\n                        'asset' => ResourceNames::forAsset($customerId, $logoTempId),\n                        'asset_group' => ResourceNames::forAssetGroup(\n                            $customerId,\n                            self::ASSET_GROUP_TEMPORARY_ID\n                        ),\n                        'field_type' => AssetFieldType::LOGO\n                    ])\n                ])\n            ]);\n        }\n\n        return $operations;\n    }\n\n\n    /**\n     * Creates a list of MutateOperations that may create asset group signals.\n     *\n     * @param int $customerId the customer ID\n     * @param string $assetGroupResourceName the resource name of the asset group\n     * @param int|null $audienceId the audience ID\n     * @return MutateOperation[] a list of MutateOperations that may create asset group signals\n     */\n    private static function createAssetGroupSignalOperations(\n        int $customerId,\n        string $assetGroupResourceName,\n        ?int $audienceId\n    ): array {\n        $operations = [];\n        if (is_null($audienceId)) {\n            return $operations;\n        }\n\n        $operations[] = new MutateOperation([\n            'asset_group_signal_operation' => new AssetGroupSignalOperation([\n                // To learn more about Audience Signals, see\n                // https://developers.google.com/google-ads/api/docs/performance-max/asset-groups#audience_signals.\n                'create' => new AssetGroupSignal([\n                    'asset_group' => $assetGroupResourceName,\n                    'audience' => new AudienceInfo([\n                        'audience' => ResourceNames::forAudience($customerId, $audienceId)\n                    ])\n                ])\n            ])\n        ]);\n\n        return $operations;\n    }\n\n    /**\n     * Prints the details of a MutateGoogleAdsResponse. Parses the \"response\" oneof field name and\n     * uses it to extract the new entity's name and resource name.\n     *\n     * @param MutateGoogleAdsResponse $mutateGoogleAdsResponse the mutate Google Ads response\n     */\n    private static function printResponseDetails(\n        MutateGoogleAdsResponse $mutateGoogleAdsResponse\n    ): void {\n        foreach ($mutateGoogleAdsResponse->getMutateOperationResponses() as $response) {\n            /** @var MutateOperationResponse $response */\n            $getter = Serializer::getGetter($response->getResponse());\n            printf(\n                \"Created a(n) %s with '%s'.%s\",\n                preg_replace(\n                    '/Result$/',\n                    '',\n                    ucfirst(Serializer::toCamelCase($response->getResponse()))\n                ),\n                $response->$getter()->getResourceName(),\n                PHP_EOL\n            );\n        }\n    }\n}\n\nAddPerformanceMaxCampaign::main();\nAddPerformanceMaxCampaign.php",
    "#!/usr/bin/env python\n# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"This example shows how to create a Performance Max campaign.\n\nFor more information about Performance Max campaigns, see\nhttps://developers.google.com/google-ads/api/docs/performance-max/overview\n\nPrerequisites:\n- You must have at least one conversion action in the account. For\nmore about conversion actions, see\nhttps://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions\n\nThis example uses the default customer conversion goals. For an example\nof setting campaign-specific conversion goals, see\nshopping_ads/add_performance_max_retail_campaign.py\n\"\"\"\n\n\nimport argparse\nfrom datetime import datetime, timedelta\nimport sys\nfrom typing import List, Optional, Iterable\nfrom uuid import uuid4\n\nfrom examples.utils.example_helpers import get_image_bytes_from_url\nfrom google.ads.googleads.client import GoogleAdsClient\nfrom google.ads.googleads.errors import GoogleAdsException\nfrom google.ads.googleads.util import convert_snake_case_to_upper_case\nfrom google.ads.googleads.v22.enums.types.asset_field_type import (\n    AssetFieldTypeEnum,\n)\nfrom google.ads.googleads.v22.resources.types.asset import Asset\nfrom google.ads.googleads.v22.resources.types.asset_group import AssetGroup\nfrom google.ads.googleads.v22.resources.types.asset_group_asset import (\n    AssetGroupAsset,\n)\nfrom google.ads.googleads.v22.resources.types.asset_group_signal import (\n    AssetGroupSignal,\n)\nfrom google.ads.googleads.v22.resources.types.campaign import Campaign\nfrom google.ads.googleads.v22.resources.types.campaign_asset import (\n    CampaignAsset,\n)\nfrom google.ads.googleads.v22.resources.types.campaign_budget import (\n    CampaignBudget,\n)\nfrom google.ads.googleads.v22.resources.types.campaign_criterion import (\n    CampaignCriterion,\n)\nfrom google.ads.googleads.v22.services.services.asset_group_service import (\n    AssetGroupServiceClient,\n)\nfrom google.ads.googleads.v22.services.services.asset_service import (\n    AssetServiceClient,\n)\nfrom google.ads.googleads.v22.services.services.campaign_service import (\n    CampaignServiceClient,\n)\nfrom google.ads.googleads.v22.services.services.geo_target_constant_service import (\n    GeoTargetConstantServiceClient,\n)\nfrom google.ads.googleads.v22.services.services.google_ads_service import (\n    GoogleAdsServiceClient,\n)\nfrom google.ads.googleads.v22.services.types.campaign_budget_service import (\n    CampaignBudgetOperation,\n)\nfrom google.ads.googleads.v22.services.types.google_ads_service import (\n    MutateGoogleAdsResponse,\n    MutateOperation,\n    MutateOperationResponse,\n)\n\n\n# We specify temporary IDs that are specific to a single mutate request.\n# Temporary IDs are always negative and unique within one mutate request.\n#\n# See https://developers.google.com/google-ads/api/docs/mutating/best-practices\n# for further details.\n#\n# These temporary IDs are fixed because they are used in multiple places.\n_BUDGET_TEMPORARY_ID = \"-1\"\n_PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID = \"-2\"\n_ASSET_GROUP_TEMPORARY_ID = \"-3\"\n\n# There are also entities that will be created in the same request but do not\n# need to be fixed temporary IDs because they are referenced only once.\nnext_temp_id = int(_ASSET_GROUP_TEMPORARY_ID) - 1\n\n\ndef main(\n    client: GoogleAdsClient,\n    customer_id: str,\n    audience_id: Optional[str],\n    brand_guidelines_enabled: bool,\n) -> None:\n    \"\"\"The main method that creates all necessary entities for the example.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        audience_id: an optional audience ID.\n        brand_guidelines_enabled: a boolean value indicating if the campaign is\n          enabled for brand guidelines.\n    \"\"\"\n    googleads_service: GoogleAdsServiceClient = client.get_service(\n        \"GoogleAdsService\"\n    )\n\n    # Performance Max campaigns require that repeated assets such as headlines\n    # and descriptions be created before the campaign.\n    # For the list of required assets for a Performance Max campaign, see\n    # https://developers.google.com/google-ads/api/docs/performance-max/assets\n    #\n    # Create the headlines.\n    headline_asset_resource_names: List[str] = create_multiple_text_assets(\n        client,\n        customer_id,\n        [\n            \"Travel\",\n            \"Travel Reviews\",\n            \"Book travel\",\n        ],\n    )\n    # Create the descriptions.\n    description_asset_resource_names: List[str] = create_multiple_text_assets(\n        client,\n        customer_id,\n        [\n            \"Take to the air!\",\n            \"Fly to the sky!\",\n        ],\n    )\n\n    # The below methods create and return MutateOperations that we later\n    # provide to the GoogleAdsService.Mutate method in order to create the\n    # entities in a single request. Since the entities for a Performance Max\n    # campaign are closely tied to one-another, it's considered a best practice\n    # to create them in a single Mutate request so they all complete\n    # successfully or fail entirely, leaving no orphaned entities. See:\n    # https://developers.google.com/google-ads/api/docs/mutating/overview\n    campaign_budget_operation: MutateOperation = (\n        create_campaign_budget_operation(\n            client,\n            customer_id,\n        )\n    )\n    performance_max_campaign_operation: MutateOperation = (\n        create_performance_max_campaign_operation(\n            client,\n            customer_id,\n            brand_guidelines_enabled,\n        )\n    )\n    campaign_criterion_operations: List[MutateOperation] = (\n        create_campaign_criterion_operations(\n            client,\n            customer_id,\n        )\n    )\n    asset_group_operations: List[MutateOperation] = (\n        create_asset_group_operation(\n            client,\n            customer_id,\n            headline_asset_resource_names,\n            description_asset_resource_names,\n            brand_guidelines_enabled,\n        )\n    )\n    asset_group_signal_operations: List[MutateOperation] = (\n        create_asset_group_signal_operations(client, customer_id, audience_id)\n    )\n\n    mutate_operations: List[MutateOperation] = [\n        # It's important to create these entities in this order because\n        # they depend on each other.\n        campaign_budget_operation,\n        performance_max_campaign_operation,\n        # Expand the list of multiple operations into the list of\n        # other mutate operations\n        *campaign_criterion_operations,\n        *asset_group_operations,\n        *asset_group_signal_operations,\n    ]\n\n    # Send the operations in a single Mutate request.\n    response: MutateGoogleAdsResponse = googleads_service.mutate(\n        customer_id=customer_id, mutate_operations=mutate_operations\n    )\n\n    print_response_details(response)\n\n\ndef create_campaign_budget_operation(\n    client: GoogleAdsClient,\n    customer_id: str,\n) -> MutateOperation:\n    \"\"\"Creates a MutateOperation that creates a new CampaignBudget.\n\n    A temporary ID will be assigned to this campaign budget so that it can be\n    referenced by other objects being created in the same Mutate request.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n\n    Returns:\n        a MutateOperation that creates a CampaignBudget.\n    \"\"\"\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    campaign_budget_operation: CampaignBudgetOperation = (\n        mutate_operation.campaign_budget_operation\n    )\n    campaign_budget: CampaignBudget = campaign_budget_operation.create\n    campaign_budget.name = f\"Performance Max campaign budget #{uuid4()}\"\n    # The budget period already defaults to DAILY.\n    campaign_budget.amount_micros = 50000000\n    campaign_budget.delivery_method = (\n        client.enums.BudgetDeliveryMethodEnum.STANDARD\n    )\n    # A Performance Max campaign cannot use a shared campaign budget.\n    campaign_budget.explicitly_shared = False\n\n    # Set a temporary ID in the budget's resource name so it can be referenced\n    # by the campaign in later steps.\n    campaign_budget.resource_name = client.get_service(\n        \"CampaignBudgetService\"\n    ).campaign_budget_path(customer_id, _BUDGET_TEMPORARY_ID)\n\n    return mutate_operation\n\n\ndef create_performance_max_campaign_operation(\n    client: GoogleAdsClient,\n    customer_id: str,\n    brand_guidelines_enabled: bool,\n) -> MutateOperation:\n    \"\"\"Creates a MutateOperation that creates a new Performance Max campaign.\n\n    A temporary ID will be assigned to this campaign so that it can\n    be referenced by other objects being created in the same Mutate request.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        brand_guidelines_enabled: a boolean value indicating if the campaign is\n          enabled for brand guidelines.\n\n    Returns:\n        a MutateOperation that creates a campaign.\n    \"\"\"\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    campaign: Campaign = mutate_operation.campaign_operation.create\n    campaign.name = f\"Performance Max campaign #{uuid4()}\"\n    # Set the campaign status as PAUSED. The campaign is the only entity in\n    # the mutate request that should have its status set.\n    campaign.status = client.enums.CampaignStatusEnum.PAUSED\n    # All Performance Max campaigns have an advertising_channel_type of\n    # PERFORMANCE_MAX. The advertising_channel_sub_type should not be set.\n    campaign.advertising_channel_type = (\n        client.enums.AdvertisingChannelTypeEnum.PERFORMANCE_MAX\n    )\n    # Bidding strategy must be set directly on the campaign.\n    # Setting a portfolio bidding strategy by resource name is not supported.\n    # Max Conversion and Maximize Conversion Value are the only strategies\n    # supported for Performance Max campaigns.\n    # An optional ROAS (Return on Advertising Spend) can be set for\n    # maximize_conversion_value. The ROAS value must be specified as a ratio in\n    # the API. It is calculated by dividing \"total value\" by \"total spend\".\n    # For more information on Maximize Conversion Value, see the support\n    # article: http://support.google.com/google-ads/answer/7684216.\n    # A target_roas of 3.5 corresponds to a 350% return on ad spend.\n    campaign.bidding_strategy_type = (\n        client.enums.BiddingStrategyTypeEnum.MAXIMIZE_CONVERSION_VALUE\n    )\n    campaign.maximize_conversion_value.target_roas = 3.5\n\n    # Set if the campaign is enabled for brand guidelines. For more information\n    # on brand guidelines, see https://support.google.com/google-ads/answer/14934472.\n    campaign.brand_guidelines_enabled = brand_guidelines_enabled\n\n    # Assign the resource name with a temporary ID.\n    campaign_service: CampaignServiceClient = client.get_service(\n        \"CampaignService\"\n    )\n    campaign.resource_name = campaign_service.campaign_path(\n        customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n    )\n    # Set the budget using the given budget resource name.\n    campaign.campaign_budget = campaign_service.campaign_budget_path(\n        customer_id, _BUDGET_TEMPORARY_ID\n    )\n\n    # Declare whether or not this campaign serves political ads targeting the\n    # EU. Valid values are:\n    #   CONTAINS_EU_POLITICAL_ADVERTISING\n    #   DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING\n    campaign.contains_eu_political_advertising = (\n        client.enums.EuPoliticalAdvertisingStatusEnum.DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING\n    )\n\n    # Optional fields\n    campaign.start_date = (datetime.now() + timedelta(1)).strftime(\"%Y%m%d\")\n    campaign.end_date = (datetime.now() + timedelta(365)).strftime(\"%Y%m%d\")\n\n    # Configures the optional opt-in/out status for asset automation settings.\n    for asset_automation_type_enum in [\n        client.enums.AssetAutomationTypeEnum.GENERATE_IMAGE_EXTRACTION,\n        client.enums.AssetAutomationTypeEnum.FINAL_URL_EXPANSION_TEXT_ASSET_AUTOMATION,\n        client.enums.AssetAutomationTypeEnum.TEXT_ASSET_AUTOMATION,\n        client.enums.AssetAutomationTypeEnum.GENERATE_ENHANCED_YOUTUBE_VIDEOS,\n        client.enums.AssetAutomationTypeEnum.GENERATE_IMAGE_ENHANCEMENT\n    ]:\n        asset_automattion_setting: Campaign.AssetAutomationSetting = client.get_type(\"Campaign\").AssetAutomationSetting()\n        asset_automattion_setting.asset_automation_type = asset_automation_type_enum\n        asset_automattion_setting.asset_automation_status = client.enums.AssetAutomationStatusEnum.OPTED_IN\n        campaign.asset_automation_settings.append(asset_automattion_setting)\n\n    return mutate_operation\n\n\ndef create_campaign_criterion_operations(\n    client: GoogleAdsClient,\n    customer_id: str,\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that create new campaign criteria.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n\n    Returns:\n        a list of MutateOperations that create new campaign criteria.\n    \"\"\"\n    campaign_service: CampaignServiceClient = client.get_service(\n        \"CampaignService\"\n    )\n    geo_target_constant_service: GeoTargetConstantServiceClient = (\n        client.get_service(\"GeoTargetConstantService\")\n    )\n    googleads_service: GoogleAdsServiceClient = client.get_service(\n        \"GoogleAdsService\"\n    )\n\n    operations: List[MutateOperation] = []\n    # Set the LOCATION campaign criteria.\n    # Target all of New York City except Brooklyn.\n    # Location IDs are listed here:\n    # https://developers.google.com/google-ads/api/reference/data/geotargets\n    # and they can also be retrieved using the GeoTargetConstantService as shown\n    # here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting\n    #\n    # We will add one positive location target for New York City (ID=1023191)\n    # and one negative location target for Brooklyn (ID=1022762).\n    # First, add the positive (negative = False) for New York City.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    campaign_criterion: CampaignCriterion = (\n        mutate_operation.campaign_criterion_operation.create\n    )\n    campaign_criterion.campaign = campaign_service.campaign_path(\n        customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n    )\n    campaign_criterion.location.geo_target_constant = (\n        geo_target_constant_service.geo_target_constant_path(\"1023191\")\n    )\n    campaign_criterion.negative = False\n    operations.append(mutate_operation)\n\n    # Next add the negative target for Brooklyn.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    campaign_criterion: CampaignCriterion = (\n        mutate_operation.campaign_criterion_operation.create\n    )\n    campaign_criterion.campaign = campaign_service.campaign_path(\n        customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n    )\n    campaign_criterion.location.geo_target_constant = (\n        geo_target_constant_service.geo_target_constant_path(\"1022762\")\n    )\n    campaign_criterion.negative = True\n    operations.append(mutate_operation)\n\n    # Set the LANGUAGE campaign criterion.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    campaign_criterion: CampaignCriterion = (\n        mutate_operation.campaign_criterion_operation.create\n    )\n    campaign_criterion.campaign = campaign_service.campaign_path(\n        customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n    )\n    # Set the language.\n    # For a list of all language codes, see:\n    # https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7\n    campaign_criterion.language.language_constant = (\n        googleads_service.language_constant_path(\"1000\")\n    )  # English\n    operations.append(mutate_operation)\n\n    return operations\n\n\ndef create_multiple_text_assets(\n    client: GoogleAdsClient, customer_id: str, texts: List[str]\n) -> List[str]:\n    \"\"\"Creates multiple text assets and returns the list of resource names.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        texts: a list of strings, each of which will be used to create a text\n          asset.\n\n    Returns:\n        asset_resource_names: a list of asset resource names.\n    \"\"\"\n    # Here again we use the GoogleAdService to create multiple text\n    # assets in a single request.\n    googleads_service: GoogleAdsServiceClient = client.get_service(\n        \"GoogleAdsService\"\n    )\n\n    operations: List[MutateOperation] = []\n    for text in texts:\n        mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n        asset: Asset = mutate_operation.asset_operation.create\n        asset.text_asset.text = text\n        operations.append(mutate_operation)\n\n    # Send the operations in a single Mutate request.\n    response: MutateGoogleAdsResponse = googleads_service.mutate(\n        customer_id=customer_id,\n        mutate_operations=operations,\n    )\n    asset_resource_names: List[str] = []\n    for result in response.mutate_operation_responses:\n        if result._pb.HasField(\"asset_result\"):\n            asset_resource_names.append(result.asset_result.resource_name)\n    print_response_details(response)\n    return asset_resource_names\n\n\ndef create_asset_group_operation(\n    client: GoogleAdsClient,\n    customer_id: str,\n    headline_asset_resource_names: List[str],\n    description_asset_resource_names: List[str],\n    brand_guidelines_enabled: bool,\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that create a new asset_group.\n\n    A temporary ID will be assigned to this asset group so that it can\n    be referenced by other objects being created in the same Mutate request.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        headline_asset_resource_names: a list of headline resource names.\n        description_asset_resource_names: a list of description resource names.\n        brand_guidelines_enabled: a boolean value indicating if the campaign is\n          enabled for brand guidelines.\n\n    Returns:\n        MutateOperations that create a new asset group and related assets.\n    \"\"\"\n    asset_group_service: AssetGroupServiceClient = client.get_service(\n        \"AssetGroupService\"\n    )\n    campaign_service: CampaignServiceClient = client.get_service(\n        \"CampaignService\"\n    )\n\n    operations: List[MutateOperation] = []\n\n    # Create the AssetGroup\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    asset_group: AssetGroup = mutate_operation.asset_group_operation.create\n    asset_group.name = f\"Performance Max asset group #{uuid4()}\"\n    asset_group.campaign = campaign_service.campaign_path(\n        customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n    )\n    asset_group.final_urls.append(\"http://www.example.com\")\n    asset_group.final_mobile_urls.append(\"http://www.example.com\")\n    asset_group.status = client.enums.AssetGroupStatusEnum.PAUSED\n    asset_group.resource_name = asset_group_service.asset_group_path(\n        customer_id,\n        _ASSET_GROUP_TEMPORARY_ID,\n    )\n    operations.append(mutate_operation)\n\n    # For the list of required assets for a Performance Max campaign, see\n    # https://developers.google.com/google-ads/api/docs/performance-max/assets\n\n    # An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n    # and providing:\n    #   the resource name of the AssetGroup\n    #   the resource name of the Asset\n    #   the field_type of the Asset in this AssetGroup.\n    #\n    # To learn more about AssetGroups, see\n    # https://developers.google.com/google-ads/api/docs/performance-max/asset-groups\n\n    # Link the previously created multiple text assets.\n\n    # Link the headline assets.\n    for resource_name in headline_asset_resource_names:\n        mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n        asset_group_asset: AssetGroupAsset = (\n            mutate_operation.asset_group_asset_operation.create\n        )\n        asset_group_asset.field_type = client.enums.AssetFieldTypeEnum.HEADLINE\n        asset_group_asset.asset_group = asset_group_service.asset_group_path(\n            customer_id,\n            _ASSET_GROUP_TEMPORARY_ID,\n        )\n        asset_group_asset.asset = resource_name\n        operations.append(mutate_operation)\n\n    #  Link the description assets.\n    for resource_name in description_asset_resource_names:\n        mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n        asset_group_asset: AssetGroupAsset = (\n            mutate_operation.asset_group_asset_operation.create\n        )\n        asset_group_asset.field_type = (\n            client.enums.AssetFieldTypeEnum.DESCRIPTION\n        )\n        asset_group_asset.asset_group = asset_group_service.asset_group_path(\n            customer_id,\n            _ASSET_GROUP_TEMPORARY_ID,\n        )\n        asset_group_asset.asset = resource_name\n        operations.append(mutate_operation)\n\n    # Create and link the long headline text asset.\n    mutate_operations: List[MutateOperation] = create_and_link_text_asset(\n        client,\n        customer_id,\n        \"Travel the World\",\n        client.enums.AssetFieldTypeEnum.LONG_HEADLINE,\n    )\n    operations.extend(mutate_operations)\n\n    # Create and link the business name and logo asset.\n    mutate_operations: List[MutateOperation] = create_and_link_brand_assets(\n        client,\n        customer_id,\n        brand_guidelines_enabled,\n        \"Interplanetary Cruises\",\n        \"https://gaagl.page.link/bjYi\",\n        \"Marketing Logo\",\n    )\n    operations.extend(mutate_operations)\n\n    # Create and link the image assets.\n\n    # Create and link the Marketing Image Asset.\n    mutate_operations: List[MutateOperation] = create_and_link_image_asset(\n        client,\n        customer_id,\n        \"https://gaagl.page.link/Eit5\",\n        client.enums.AssetFieldTypeEnum.MARKETING_IMAGE,\n        \"Marketing Image\",\n    )\n    operations.extend(mutate_operations)\n\n    # Create and link the Square Marketing Image Asset.\n    mutate_operations: List[MutateOperation] = create_and_link_image_asset(\n        client,\n        customer_id,\n        \"https://gaagl.page.link/bjYi\",\n        client.enums.AssetFieldTypeEnum.SQUARE_MARKETING_IMAGE,\n        \"Square Marketing Image\",\n    )\n    operations.extend(mutate_operations)\n    return operations\n\n\ndef create_and_link_text_asset(\n    client: GoogleAdsClient,\n    customer_id: str,\n    text: str,\n    field_type: AssetFieldTypeEnum.AssetFieldType,\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that create a new linked text asset.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        text: the text of the asset to be created.\n        field_type: the field_type of the new asset in the AssetGroupAsset.\n\n    Returns:\n        MutateOperations that create a new linked text asset.\n    \"\"\"\n    global next_temp_id\n    operations: List[MutateOperation] = []\n    asset_service: AssetServiceClient = client.get_service(\"AssetService\")\n    asset_group_service: AssetGroupServiceClient = client.get_service(\n        \"AssetGroupService\"\n    )\n\n    # Create the Text Asset.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    asset: Asset = mutate_operation.asset_operation.create\n    asset.resource_name = asset_service.asset_path(customer_id, next_temp_id)\n    asset.text_asset.text = text\n    operations.append(mutate_operation)\n\n    # Create an AssetGroupAsset to link the Asset to the AssetGroup.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    asset_group_asset: AssetGroupAsset = (\n        mutate_operation.asset_group_asset_operation.create\n    )\n    asset_group_asset.field_type = field_type\n    asset_group_asset.asset_group = asset_group_service.asset_group_path(\n        customer_id,\n        _ASSET_GROUP_TEMPORARY_ID,\n    )\n    asset_group_asset.asset = asset_service.asset_path(\n        customer_id, next_temp_id\n    )\n    operations.append(mutate_operation)\n\n    next_temp_id -= 1\n    return operations\n\n\ndef create_and_link_image_asset(\n    client: GoogleAdsClient,\n    customer_id: str,\n    url: str,\n    field_type: AssetFieldTypeEnum.AssetFieldType,\n    asset_name: str,\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that create a new linked image asset.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        url: the url of the image to be retrieved and put into an asset.\n        field_type: the field_type of the new asset in the AssetGroupAsset.\n        asset_name: the asset name.\n\n    Returns:\n        MutateOperations that create a new linked image asset.\n    \"\"\"\n    global next_temp_id\n    operations: List[MutateOperation] = []\n    asset_service: AssetServiceClient = client.get_service(\"AssetService\")\n    asset_group_service: AssetGroupServiceClient = client.get_service(\n        \"AssetGroupService\"\n    )\n\n    # Create the Image Asset.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    asset: Asset = mutate_operation.asset_operation.create\n    asset.resource_name = asset_service.asset_path(customer_id, next_temp_id)\n    # Provide a unique friendly name to identify your asset.\n    # When there is an existing image asset with the same content but a different\n    # name, the new name will be dropped silently.\n    asset.name = asset_name\n    asset.type_ = client.enums.AssetTypeEnum.IMAGE\n    asset.image_asset.data = get_image_bytes_from_url(url)\n    operations.append(mutate_operation)\n\n    # Create an AssetGroupAsset to link the Asset to the AssetGroup.\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    asset_group_asset: AssetGroupAsset = (\n        mutate_operation.asset_group_asset_operation.create\n    )\n    asset_group_asset.field_type = field_type\n    asset_group_asset.asset_group = asset_group_service.asset_group_path(\n        customer_id,\n        _ASSET_GROUP_TEMPORARY_ID,\n    )\n    asset_group_asset.asset = asset_service.asset_path(\n        customer_id, next_temp_id\n    )\n    operations.append(mutate_operation)\n\n    next_temp_id -= 1\n    return operations\n\ndef create_and_link_brand_assets(\n    client: GoogleAdsClient,\n    customer_id: str,\n    brand_guidelines_enabled: bool,\n    business_name: str,\n    logo_url: str,\n    logo_name: str,\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that create linked brand assets.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        brand_guidelines_enabled: a boolean value indicating if the campaign is\n          enabled for brand guidelines.\n        business_name: the business name text to be put into an asset.\n        logo_url: the url of the logo to be retrieved and put into an asset.\n        logo_name: the asset name of the logo.\n\n    Returns:\n        MutateOperations that create linked brand assets.\n    \"\"\"\n    global next_temp_id\n    operations: List[MutateOperation] = []\n    asset_service: AssetServiceClient = client.get_service(\"AssetService\")\n\n    # Create the Text Asset.\n    text_asset_temp_id = next_temp_id\n    next_temp_id -= 1\n\n    text_mutate_operation = client.get_type(\"MutateOperation\")\n    text_asset: Asset = text_mutate_operation.asset_operation.create\n    text_asset.resource_name = asset_service.asset_path(\n        customer_id, text_asset_temp_id\n    )\n    text_asset.text_asset.text = business_name\n    operations.append(text_mutate_operation)\n\n    # Create the Image Asset.\n    image_asset_temp_id = next_temp_id\n    next_temp_id -= 1\n\n    image_mutate_operation = client.get_type(\"MutateOperation\")\n    image_asset: Asset = image_mutate_operation.asset_operation.create\n    image_asset.resource_name = asset_service.asset_path(\n        customer_id, image_asset_temp_id\n    )\n    # Provide a unique friendly name to identify your asset.\n    # When there is an existing image asset with the same content but a different\n    # name, the new name will be dropped silently.\n    image_asset.name = logo_name\n    image_asset.type_ = client.enums.AssetTypeEnum.IMAGE\n    image_asset.image_asset.data = get_image_bytes_from_url(logo_url)\n    operations.append(image_mutate_operation)\n\n    if brand_guidelines_enabled:\n        # Create CampaignAsset resources to link the Asset resources to the Campaign.\n        campaign_service: CampaignServiceClient = client.get_service(\n            \"CampaignService\"\n        )\n\n        business_name_mutate_operation: MutateOperation = client.get_type(\n            \"MutateOperation\"\n        )\n        business_name_campaign_asset: CampaignAsset = (\n            business_name_mutate_operation.campaign_asset_operation.create\n        )\n        business_name_campaign_asset.field_type = (\n            client.enums.AssetFieldTypeEnum.BUSINESS_NAME\n        )\n        business_name_campaign_asset.campaign = campaign_service.campaign_path(\n            customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n        )\n        business_name_campaign_asset.asset = asset_service.asset_path(\n            customer_id, text_asset_temp_id\n        )\n        operations.append(business_name_mutate_operation)\n\n        logo_mutate_operation: MutateOperation = client.get_type(\n            \"MutateOperation\"\n        )\n        logo_campaign_asset: CampaignAsset = (\n            logo_mutate_operation.campaign_asset_operation.create\n        )\n        logo_campaign_asset.field_type = client.enums.AssetFieldTypeEnum.LOGO\n        logo_campaign_asset.campaign = campaign_service.campaign_path(\n            customer_id, _PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n        )\n        logo_campaign_asset.asset = asset_service.asset_path(\n            customer_id, image_asset_temp_id\n        )\n        operations.append(logo_mutate_operation)\n\n    else:\n        # Create AssetGroupAsset resources to link the Asset resources to the AssetGroup.\n        asset_group_service: AssetGroupServiceClient = client.get_service(\n            \"AssetGroupService\"\n        )\n\n        business_name_mutate_operation: MutateOperation = client.get_type(\n            \"MutateOperation\"\n        )\n        business_name_asset_group_asset: AssetGroupAsset = (\n            business_name_mutate_operation.asset_group_asset_operation.create\n        )\n        business_name_asset_group_asset.field_type = (\n            client.enums.AssetFieldTypeEnum.BUSINESS_NAME\n        )\n        business_name_asset_group_asset.asset_group = (\n            asset_group_service.asset_group_path(\n                customer_id,\n                _ASSET_GROUP_TEMPORARY_ID,\n            )\n        )\n        business_name_asset_group_asset.asset = asset_service.asset_path(\n            customer_id, text_asset_temp_id\n        )\n        operations.append(business_name_mutate_operation)\n\n        logo_mutate_operation: MutateOperation = client.get_type(\n            \"MutateOperation\"\n        )\n        logo_asset_group_asset: AssetGroupAsset = (\n            logo_mutate_operation.asset_group_asset_operation.create\n        )\n        logo_asset_group_asset.field_type = client.enums.AssetFieldTypeEnum.LOGO\n        logo_asset_group_asset.asset_group = (\n            asset_group_service.asset_group_path(\n                customer_id,\n                _ASSET_GROUP_TEMPORARY_ID,\n            )\n        )\n        logo_asset_group_asset.asset = asset_service.asset_path(\n            customer_id, image_asset_temp_id\n        )\n        operations.append(logo_mutate_operation)\n\n    return operations\n\n\ndef print_response_details(response: MutateGoogleAdsResponse) -> None:\n    \"\"\"Prints the details of a MutateGoogleAdsResponse.\n\n    Parses the \"response\" oneof field name and uses it to extract the new\n    entity's name and resource name.\n\n    Args:\n        response: a MutateGoogleAdsResponse object.\n    \"\"\"\n    # Parse the Mutate response to print details about the entities that\n    # were created by the request.\n    results: Iterable[MutateOperation] = response.mutate_operation_responses\n    suffix = \"_result\"\n    for result in results:\n        for field_descriptor, value in result._pb.ListFields():\n            if field_descriptor.name.endswith(suffix):\n                name = field_descriptor.name[: -len(suffix)]\n            else:\n                name = field_descriptor.name\n            print(\n                f\"Created a(n) {convert_snake_case_to_upper_case(name)} with \"\n                f\"{str(value).strip()}.\"\n            )\n\n\ndef create_asset_group_signal_operations(\n    client: GoogleAdsClient, customer_id: str, audience_id: Optional[str]\n) -> List[MutateOperation]:\n    \"\"\"Creates a list of MutateOperations that may create asset group signals.\n\n    Args:\n        client: an initialized GoogleAdsClient instance.\n        customer_id: a client customer ID.\n        audience_id: an optional audience ID.\n\n    Returns:\n        MutateOperations that create new asset group signals.\n    \"\"\"\n    googleads_service: GoogleAdsServiceClient = client.get_service(\n        \"GoogleAdsService\"\n    )\n    asset_group_resource_name: str = googleads_service.asset_group_path(\n        customer_id, _ASSET_GROUP_TEMPORARY_ID\n    )\n\n    operations: List[MutateOperation] = []\n\n    if audience_id:\n        # Create an audience asset group signal.\n        # To learn more about Audience Signals, see:\n        # https://developers.google.com/google-ads/api/performance-max/asset-group-signals#audiences\n        mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n        operation: AssetGroupSignal = (\n            mutate_operation.asset_group_signal_operation.create\n        )\n        operation.asset_group = asset_group_resource_name\n        operation.audience.audience = googleads_service.audience_path(\n            customer_id, audience_id\n        )\n        operations.append(mutate_operation)\n\n    # Create a search theme asset group signal.\n    # To learn more about Search Themes Signals, see:\n    # https://developers.google.com/google-ads/api/performance-max/asset-group-signals#search_themes\n    mutate_operation: MutateOperation = client.get_type(\"MutateOperation\")\n    operation: AssetGroupSignal = (\n        mutate_operation.asset_group_signal_operation.create\n    )\n    operation.asset_group = asset_group_resource_name\n    operation.search_theme.text = \"travel\"\n    operations.append(mutate_operation)\n\n    return operations\n\n\n\nif __name__ == \"__main__\":\n    parser: argparse.ArgumentParser = argparse.ArgumentParser(\n        description=(\"Creates a Performance Max campaign.\")\n    )\n    # The following argument(s) should be provided to run the example.\n    parser.add_argument(\n        \"-c\",\n        \"--customer_id\",\n        type=str,\n        required=True,\n        help=\"The Google Ads customer ID.\",\n    )\n    parser.add_argument(\n        \"-a\",\n        \"--audience_id\",\n        type=str,\n        help=\"The ID of an audience.\",\n    )\n    parser.add_argument(\n        \"-b\",\n        \"--brand_guidelines_enabled\",\n        type=bool,\n        default=False,\n        help=(\n            \"A boolean value indicating if the created campaign is enabled \"\n            \"for brand guidelines.\"\n        ),\n    )\n\n    args: argparse.Namespace = parser.parse_args()\n\n    # GoogleAdsClient will read the google-ads.yaml configuration file in the\n    # home directory if none is specified.\n    googleads_client: GoogleAdsClient = GoogleAdsClient.load_from_storage(\n        version=\"v22\"\n    )\n\n    try:\n        main(\n            googleads_client,\n            args.customer_id,\n            args.audience_id,\n            args.brand_guidelines_enabled,\n        )\n    except GoogleAdsException as ex:\n        print(\n            f'Request with ID \"{ex.request_id}\" failed with status '\n            f'\"{ex.error.code().name}\" and includes the following errors:'\n        )\n        for error in ex.failure.errors:\n            print(f'Error with message \"{error.message}\".')\n            if error.location:\n                for field_path_element in error.location.field_path_elements:\n                    print(f\"\\t\\tOn field: {field_path_element.field_name}\")\n        sys.exit(1)\nadd_performance_max_campaign.py",
    "#!/usr/bin/env ruby\n# Encoding: utf-8\n#\n# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This example shows how to create a Performance Max campaign.\n#\n# For more information about Performance Max campaigns, see\n# https://developers.google.com/google-ads/api/docs/performance-max/overview\n#\n# Prerequisites:\n# - You must have at least one conversion action in the account. For\n# more about conversion actions, see\n# https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions\n#\n# This example uses the default customer conversion goals. For an example\n# of setting campaign-specific conversion goals, see\n# shopping_ads/add_performance_max_retail_campaign.rb\n\nrequire 'optparse'\nrequire 'date'\nrequire 'open-uri'\nrequire 'google/ads/google_ads'\n\n# We specify temporary IDs that are specific to a single mutate request.\n# Temporary IDs are always negative and unique within one mutate request.\n#\n# See https://developers.google.com/google-ads/api/docs/mutating/best-practices\n# for further details.\n#\n# These temporary IDs are fixed because they are used in multiple places.\nBUDGET_TEMPORARY_ID = \"-1\"\nPERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID = \"-2\"\nASSET_GROUP_TEMPORARY_ID = \"-3\"\n\n# There are also entities that will be created in the same request but do not\n# need to be fixed temporary IDs because they are referenced only once.\ndef next_temp_id\n  @id ||= ASSET_GROUP_TEMPORARY_ID.to_i\n  @id -= 1\nend\n\ndef add_performance_max_campaign(\n    customer_id,\n    audience_id,\n    brand_guidelines_enabled)\n  # GoogleAdsClient will read a config file from\n  # ENV['HOME']/google_ads_config.rb when called without parameters\n  client = Google::Ads::GoogleAds::GoogleAdsClient.new\n\n  # Performance Max campaigns require that repeated assets such as headlines\n  # and descriptions be created before the campaign.\n  # For the list of required assets for a Performance Max campaign, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/assets\n  #\n  # Create the headlines.\n  headline_asset_resource_names = create_multiple_text_assets(\n    client,\n    customer_id,\n    [\n      \"Travel\",\n      \"Travel Reviews\",\n      \"Book travel\",\n    ])\n  # Create the descriptions.\n  description_asset_resource_names = create_multiple_text_assets(\n    client,\n    customer_id,\n    [\n      \"Take to the air!\",\n      \"Fly to the sky!\",\n    ])\n\n  # The below methods create and return MutateOperations that we later\n  # provide to the GoogleAdsService.Mutate method in order to create the\n  # entities in a single request. Since the entities for a Performance Max\n  # campaign are closely tied to one-another, it's considered a best practice\n  # to create them in a single Mutate request so they all complete\n  # successfully or fail entirely, leaving no orphaned entities. See:\n  # https://developers.google.com/google-ads/api/docs/mutating/overview\n  campaign_budget_operation = create_campaign_budget_operation(\n    client,\n    customer_id,\n  )\n  performance_max_campaign_operation = create_performance_max_campaign_operation(\n    client,\n    customer_id,\n    brand_guidelines_enabled,\n  )\n  campaign_criterion_operations = create_campaign_criterion_operations(\n    client,\n    customer_id,\n  )\n  asset_group_operations = create_asset_group_operation(\n    client,\n    customer_id,\n    headline_asset_resource_names,\n    description_asset_resource_names,\n    brand_guidelines_enabled,\n  )\n  asset_group_signal_operations = create_asset_group_signal_operations(\n    client,\n    customer_id,\n    audience_id,\n  )\n\n  # Send the operations in a single Mutate request.\n  response = client.service.google_ads.mutate(\n    customer_id: customer_id,\n    mutate_operations: [\n      # It's important to create these entities in this order because\n      # they depend on each other.\n      campaign_budget_operation,\n      performance_max_campaign_operation,\n      # Expand the list of multiple operations into the list of\n      # other mutate operations\n      campaign_criterion_operations,\n      asset_group_operations,\n      asset_group_signal_operations,\n    ].flatten)\n\n  print_response_details(response)\nend\n\n# Creates a MutateOperation that creates a new CampaignBudget.\n#\n# A temporary ID will be assigned to this campaign budget so that it can be\n# referenced by other objects being created in the same Mutate request.\ndef create_campaign_budget_operation(client, customer_id)\n  client.operation.mutate do |m|\n    m.campaign_budget_operation = client.operation.create_resource.campaign_budget do |cb|\n      cb.name = \"Performance Max campaign budget #{SecureRandom.uuid}\"\n      # The budget period already defaults to DAILY.\n      cb.amount_micros = 50_000_000\n      cb.delivery_method = :STANDARD\n        # A Performance Max campaign cannot use a shared campaign budget.\n        cb.explicitly_shared = false\n\n      # Set a temporary ID in the budget's resource name so it can be referenced\n      # by the campaign in later steps.\n      cb.resource_name = client.path.campaign_budget(customer_id, BUDGET_TEMPORARY_ID)\n    end\n  end\nend\n\n# Creates a MutateOperation that creates a new Performance Max campaign.\n#\n# A temporary ID will be assigned to this campaign so that it can\n# be referenced by other objects being created in the same Mutate request.\ndef create_performance_max_campaign_operation(\n    client,\n    customer_id,\n    brand_guidelines_enabled)\n  client.operation.mutate do |m|\n    m.campaign_operation = client.operation.create_resource.campaign do |c|\n      c.name = \"Performance Max campaign #{SecureRandom.uuid}\"\n      # Set the campaign status as PAUSED. The campaign is the only entity in\n      # the mutate request that should have its status set.\n      c.status = :PAUSED\n      # All Performance Max campaigns have an advertising_channel_type of\n      # PERFORMANCE_MAX. The advertising_channel_sub_type should not be set.\n      c.advertising_channel_type = :PERFORMANCE_MAX\n      # Bidding strategy must be set directly on the campaign.\n      # Setting a portfolio bidding strategy by resource name is not supported.\n      # Max Conversion and Maximize Conversion Value are the only strategies\n      # supported for Performance Max campaigns.\n      # An optional ROAS (Return on Advertising Spend) can be set for\n      # maximize_conversion_value. The ROAS value must be specified as a ratio in\n      # the API. It is calculated by dividing \"total value\" by \"total spend\".\n      # For more information on Maximize Conversion Value, see the support\n      # article: http://support.google.com/google-ads/answer/7684216.\n      # A target_roas of 3.5 corresponds to a 350% return on ad spend.\n      c.bidding_strategy_type = :MAXIMIZE_CONVERSION_VALUE\n      c.maximize_conversion_value = client.resource.maximize_conversion_value do |mcv|\n        mcv.target_roas = 3.5\n      end\n\n      # Configures the optional opt-in/out status for asset automation settings.\n      c.asset_automation_settings << client.resource.asset_automation_setting do |aas|\n        aas.asset_automation_type = :GENERATE_IMAGE_EXTRACTION\n        aas.asset_automation_status = :OPTED_IN\n      end\n      c.asset_automation_settings << client.resource.asset_automation_setting do |aas|\n        aas.asset_automation_type = :FINAL_URL_EXPANSION_TEXT_ASSET_AUTOMATION\n        aas.asset_automation_status = :OPTED_IN\n      end\n      c.asset_automation_settings << client.resource.asset_automation_setting do |aas|\n        aas.asset_automation_type = :TEXT_ASSET_AUTOMATION\n        aas.asset_automation_status = :OPTED_IN\n      end\n      c.asset_automation_settings << client.resource.asset_automation_setting do |aas|\n        aas.asset_automation_type = :GENERATE_ENHANCED_YOUTUBE_VIDEOS\n        aas.asset_automation_status = :OPTED_IN\n      end\n      c.asset_automation_settings << client.resource.asset_automation_setting do |aas|\n        aas.asset_automation_type = :GENERATE_IMAGE_ENHANCEMENT\n        aas.asset_automation_status = :OPTED_IN\n      end\n\n      # Set if the campaign is enabled for brand guidelines. For more\n      # information on brand guidelines, see\n      # https://support.google.com/google-ads/answer/14934472.\n      c.brand_guidelines_enabled = brand_guidelines_enabled\n\n      # Assign the resource name with a temporary ID.\n      c.resource_name = client.path.campaign(customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID)\n      # Set the budget using the given budget resource name.\n      c.campaign_budget = client.path.campaign_budget(customer_id, BUDGET_TEMPORARY_ID)\n\n      # Declare whether or not this campaign serves political ads targeting the EU.\n      # Valid values are CONTAINS_EU_POLITICAL_ADVERTISING and\n      # DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING.\n      c.contains_eu_political_advertising = :DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING\n\n      # Optional fields\n      c.start_date = DateTime.parse((Date.today + 1).to_s).strftime('%Y%m%d')\n      c.end_date = DateTime.parse(Date.today.next_year.to_s).strftime('%Y%m%d')\n    end\n  end\nend\n\n# Creates a list of MutateOperations that create new campaign criteria.\ndef create_campaign_criterion_operations(client, customer_id)\n  operations = []\n\n  # Set the LOCATION campaign criteria.\n  # Target all of New York City except Brooklyn.\n  # Location IDs are listed here:\n  # https://developers.google.com/google-ads/api/reference/data/geotargets\n  # and they can also be retrieved using the GeoTargetConstantService as shown\n  # here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting\n  #\n  # We will add one positive location target for New York City (ID=1023191)\n  # and one negative location target for Brooklyn (ID=1022762).\n  # First, add the positive (negative = false) for New York City.\n  operations << client.operation.mutate do |m|\n    m.campaign_criterion_operation =\n      client.operation.create_resource.campaign_criterion do |cc|\n      cc.campaign = client.path.campaign(\n        customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID)\n      cc.location = client.resource.location_info do  |li|\n        li.geo_target_constant = client.path.geo_target_constant(\"1023191\")\n      end\n      cc.negative = false\n    end\n  end\n\n  # Next add the negative target for Brooklyn.\n  operations << client.operation.mutate do |m|\n    m.campaign_criterion_operation =\n      client.operation.create_resource.campaign_criterion do |cc|\n      cc.campaign = client.path.campaign(\n        customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID)\n      cc.location = client.resource.location_info do  |li|\n        li.geo_target_constant = client.path.geo_target_constant(\"1022762\")\n      end\n      cc.negative = true\n    end\n  end\n\n  # Set the LANGUAGE campaign criterion.\n  operations << client.operation.mutate do |m|\n    m.campaign_criterion_operation =\n      client.operation.create_resource.campaign_criterion do |cc|\n      cc.campaign = client.path.campaign(\n        customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID)\n      # Set the language.\n      # For a list of all language codes, see:\n      # https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7\n      cc.language = client.resource.language_info do |li|\n        li.language_constant = client.path.language_constant(\"1000\")  # English\n      end\n    end\n  end\n\n  operations\nend\n\n# Creates multiple text assets and returns the list of resource names.\ndef create_multiple_text_assets(client, customer_id, texts)\n  operations = texts.map do |text|\n    client.operation.mutate do |m|\n      m.asset_operation = client.operation.create_resource.asset do |asset|\n        asset.text_asset = client.resource.text_asset do |text_asset|\n          text_asset.text = text\n        end\n      end\n    end\n  end\n\n  # Send the operations in a single Mutate request.\n  response = client.service.google_ads.mutate(\n    customer_id: customer_id,\n    mutate_operations: operations,\n  )\n\n  asset_resource_names = []\n  response.mutate_operation_responses.each do |result|\n    if result.asset_result\n      asset_resource_names.append(result.asset_result.resource_name)\n    end\n  end\n  print_response_details(response)\n  asset_resource_names\nend\n\n# Creates a list of MutateOperations that create a new asset_group.\n#\n# A temporary ID will be assigned to this asset group so that it can\n# be referenced by other objects being created in the same Mutate request.\ndef create_asset_group_operation(\n    client,\n    customer_id,\n    headline_asset_resource_names,\n    description_asset_resource_names,\n    brand_guidelines_enabled)\n  operations = []\n\n  # Create the AssetGroup\n  operations << client.operation.mutate do |m|\n    m.asset_group_operation = client.operation.create_resource.asset_group do |ag|\n      ag.name = \"Performance Max asset group #{SecureRandom.uuid}\"\n      ag.campaign = client.path.campaign(\n        customer_id,\n        PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID)\n      ag.final_urls << \"http://www.example.com\"\n      ag.final_mobile_urls << \"http://www.example.com\"\n      ag.status = :PAUSED\n      ag.resource_name = client.path.asset_group(\n        customer_id,\n        ASSET_GROUP_TEMPORARY_ID)\n    end\n  end\n\n  # For the list of required assets for a Performance Max campaign, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/assets\n  #\n  # An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n  # and providing:\n  #   the resource name of the AssetGroup\n  #   the resource name of the Asset\n  #   the field_type of the Asset in this AssetGroup.\n  #\n  # To learn more about AssetGroups, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/asset-groups\n\n  # Link the previously created multiple text assets.\n\n  # Link the headline assets.\n  headline_asset_resource_names.each do |resource_name|\n    operations << client.operation.mutate do |m|\n      m.asset_group_asset_operation = client.operation.create_resource\n          .asset_group_asset do |aga|\n        aga.field_type = :HEADLINE\n        aga.asset_group = client.path.asset_group(\n          customer_id,\n          ASSET_GROUP_TEMPORARY_ID)\n        aga.asset = resource_name\n      end\n    end\n  end\n\n  #  Link the description assets.\n  description_asset_resource_names.each do |resource_name|\n    operations << client.operation.mutate do |m|\n      m.asset_group_asset_operation = client.operation.create_resource\n          .asset_group_asset do |aga|\n        aga.field_type = :DESCRIPTION\n        aga.asset_group = client.path.asset_group(\n          customer_id,\n          ASSET_GROUP_TEMPORARY_ID)\n        aga.asset = resource_name\n      end\n    end\n  end\n\n  # Create and link the long headline text asset.\n  operations += create_and_link_text_asset(\n    client,\n    customer_id,\n    \"Travel the World\",\n    :LONG_HEADLINE)\n\n  # Create and link the business name and logo asset.\n  operations += create_and_link_brand_assets(\n    client,\n    customer_id,\n    brand_guidelines_enabled,\n    \"Interplanetary Cruises\",\n    \"https://gaagl.page.link/bjYi\",\n    \"Marketing Logo\")\n\n  # Create and link the image assets.\n\n  # Create and link the Marketing Image Asset.\n  operations += create_and_link_image_asset(\n    client,\n    customer_id,\n    \"https://gaagl.page.link/Eit5\",\n    :MARKETING_IMAGE,\n    \"Marketing Image\")\n\n  # Create and link the Square Marketing Image Asset.\n  operations += create_and_link_image_asset(\n    client,\n    customer_id,\n    \"https://gaagl.page.link/bjYi\",\n    :SQUARE_MARKETING_IMAGE,\n    \"Square Marketing Image\")\n\n  operations\nend\n\n# Creates a list of MutateOperations that create a new linked text asset.\ndef create_and_link_text_asset(client, customer_id, text, field_type)\n  operations = []\n  temp_id = next_temp_id\n\n  # Create the Text Asset.\n  operations << client.operation.mutate do |m|\n    m.asset_operation = client.operation.create_resource.asset do |a|\n      a.resource_name = client.path.asset(customer_id, temp_id)\n      a.text_asset = client.resource.text_asset do |text_asset|\n        text_asset.text = text\n      end\n    end\n  end\n\n  # Create an AssetGroupAsset to link the Asset to the AssetGroup.\n  operations << client.operation.mutate do |m|\n    m.asset_group_asset_operation = client.operation.create_resource\n        .asset_group_asset do |aga|\n      aga.field_type = field_type\n      aga.asset_group = client.path.asset_group(\n        customer_id,\n        ASSET_GROUP_TEMPORARY_ID)\n      aga.asset = client.path.asset(customer_id, temp_id)\n    end\n  end\n\n  operations\nend\n\n# Creates a list of MutateOperations that create a new linked image asset.\ndef create_and_link_image_asset(client, customer_id, url, field_type, asset_name)\n  operations = []\n  temp_id = next_temp_id\n\n  # Create the Image Asset.\n  operations << client.operation.mutate do |m|\n    m.asset_operation = client.operation.create_resource.asset do |a|\n      a.resource_name = client.path.asset(customer_id, temp_id)\n      # Provide a unique friendly name to identify your asset.\n      # When there is an existing image asset with the same content but a different\n      # name, the new name will be dropped silently.\n      a.name = asset_name\n      a.type = :IMAGE\n      a.image_asset = client.resource.image_asset do |image_asset|\n        image_asset.data = get_image_bytes(url)\n      end\n    end\n  end\n\n  # Create an AssetGroupAsset to link the Asset to the AssetGroup.\n  operations << client.operation.mutate do |m|\n    m.asset_group_asset_operation = client.operation.create_resource.\n        asset_group_asset do |aga|\n      aga.field_type = field_type\n      aga.asset_group = client.path.asset_group(\n        customer_id,\n        ASSET_GROUP_TEMPORARY_ID,\n      )\n      aga.asset = client.path.asset(customer_id, temp_id)\n    end\n  end\n\n  operations\nend\n\n# Creates a list of MutateOperations that create linked brand assets.\ndef create_and_link_brand_assets(\n    client,\n    customer_id,\n    brand_guidelines_enabled,\n    business_name,\n    logo_url,\n    logo_name)\n  operations = []\n\n  # Create the Text Asset.\n  text_asset_temp_id = next_temp_id\n  operations << client.operation.mutate do |m|\n    m.asset_operation = client.operation.create_resource.asset do |a|\n      a.resource_name = client.path.asset(customer_id, text_asset_temp_id)\n      a.text_asset = client.resource.text_asset do |text_asset|\n        text_asset.text = business_name\n      end\n    end\n  end\n\n  # Create the Image Asset.\n  image_asset_temp_id = next_temp_id\n  operations << client.operation.mutate do |m|\n    m.asset_operation = client.operation.create_resource.asset do |a|\n      a.resource_name = client.path.asset(customer_id, image_asset_temp_id)\n      # Provide a unique friendly name to identify your asset.\n      # When there is an existing image asset with the same content but a different\n      # name, the new name will be dropped silently.\n      a.name = logo_name\n      a.type = :IMAGE\n      a.image_asset = client.resource.image_asset do |image_asset|\n        image_asset.data = get_image_bytes(logo_url)\n      end\n    end\n  end\n\n  if brand_guidelines_enabled\n    # Create CampaignAsset resources to link the Asset resources to the Campaign.\n    operations << client.operation.mutate do |m|\n      m.campaign_asset_operation = client.operation.create_resource.\n          campaign_asset do |ca|\n        ca.field_type = :BUSINESS_NAME\n        ca.campaign = client.path.campaign(\n          customer_id,\n          PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID,\n        )\n        ca.asset = client.path.asset(customer_id, text_asset_temp_id)\n      end\n    end\n\n    operations << client.operation.mutate do |m|\n      m.campaign_asset_operation = client.operation.create_resource.\n          campaign_asset do |ca|\n        ca.field_type = :LOGO\n        ca.campaign = client.path.campaign(\n          customer_id,\n          PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID,\n        )\n        ca.asset = client.path.asset(customer_id, image_asset_temp_id)\n      end\n    end\n  else\n    # Create AssetGroupAsset resources to link the Asset resources to the AssetGroup.\n    operations << client.operation.mutate do |m|\n      m.asset_group_asset_operation = client.operation.create_resource.\n          asset_group_asset do |aga|\n        aga.field_type = :BUSINESS_NAME\n        aga.asset_group = client.path.asset_group(\n          customer_id,\n          ASSET_GROUP_TEMPORARY_ID,\n        )\n        aga.asset = client.path.asset(customer_id, text_asset_temp_id)\n      end\n    end\n\n    operations << client.operation.mutate do |m|\n      m.asset_group_asset_operation = client.operation.create_resource.\n          asset_group_asset do |aga|\n        aga.field_type = :LOGO\n        aga.asset_group = client.path.asset_group(\n          customer_id,\n          ASSET_GROUP_TEMPORARY_ID,\n        )\n        aga.asset = client.path.asset(customer_id, image_asset_temp_id)\n      end\n    end\n  end\n\n  operations\nend\n\n# Create a list of MutateOperations that create AssetGroupSignals.\ndef create_asset_group_signal_operations(client, customer_id, audience_id)\n  operations = []\n  return operations if audience_id.nil?\n\n  operations << client.operation.mutate do |m|\n    m.asset_group_signal_operation = client.operation.create_resource.\n        asset_group_signal do |ags|\n      ags.asset_group = client.path.asset_group(\n        customer_id,\n        ASSET_GROUP_TEMPORARY_ID,\n      )\n      ags.audience = client.resource.audience_info do |ai|\n        ai.audience = client.path.audience(customer_id, audience_id)\n      end\n    end\n  end\n\n  operations\nend\n\n# Loads image data from a URL.\ndef get_image_bytes(url)\n  URI.open(url).read\nend\n\n# Prints the details of a MutateGoogleAdsResponse.\ndef print_response_details(response)\n  # Parse the mutate response to print details about the entities that\n  # were created by the request.\n  suffix = \"_result\"\n  response.mutate_operation_responses.each do |result|\n    result.to_h.select {|k, v| v }.each do |name, value|\n      if name.to_s.end_with?(suffix)\n        name = name.to_s.delete_suffix(suffix)\n      end\n\n      puts \"Created a(n) #{::Google::Ads::GoogleAds::Utils.camelize(name)} \" \\\n        \"with #{value.to_s.strip}.\"\n    end\n  end\nend\n\nif __FILE__ == $0\n  options = {}\n\n  # The following parameter(s) should be provided to run the example. You can\n  # either specify these by changing the INSERT_XXX_ID_HERE values below, or on\n  # the command line.\n  #\n  # Parameters passed on the command line will override any parameters set in\n  # code.\n  #\n  # Running the example with -h will print the command line usage.\n  options[:customer_id] = 'INSERT_CUSTOMER_ID_HERE'\n  options[:audience_id] = nil\n  options[:brand_guidelines_enabled] = false\n\n  OptionParser.new do |opts|\n    opts.banner = sprintf('Usage: %s [options]', File.basename(__FILE__))\n\n    opts.separator ''\n    opts.separator 'Options:'\n\n    opts.on('-C', '--customer-id CUSTOMER-ID', String, 'Customer ID') do |v|\n      options[:customer_id] = v\n    end\n\n    opts.on('-D', '--audience-id AUDIENCE-ID', String, 'Audience ID (optional)') do |v|\n      options[:audience_id] = v\n    end\n\n    opts.on('-B', '--brand-guidelines-enabled', 'Enable brand guidelines (optional)') do\n      options[:brand_guidelines_enabled] = true\n    end\n\n    opts.separator ''\n    opts.separator 'Help:'\n\n    opts.on_tail('-h', '--help', 'Show this message') do\n      puts opts\n      exit\n    end\n  end.parse!\n\n  begin\n    add_performance_max_campaign(\n      options.fetch(:customer_id).tr(\"-\", \"\"),\n      options[:audience_id],\n      options[:brand_guidelines_enabled]\n    )\n  rescue Google::Ads::GoogleAds::Errors::GoogleAdsError => e\n    e.failure.errors.each do |error|\n      STDERR.printf(\"Error with message: %s\\n\", error.message)\n      if error.location\n        error.location.field_path_elements.each do |field_path_element|\n          STDERR.printf(\"\\tOn field: %s\\n\", field_path_element.field_name)\n        end\n      end\n      error.error_code.to_h.each do |k, v|\n        next if v == :UNSPECIFIED\n        STDERR.printf(\"\\tType: %s\\n\\tCode: %s\\n\", k, v)\n      end\n    end\n    raise\n  end\nend\nadd_performance_max_campaign.rb",
    "#!/usr/bin/perl -w\n#\n# Copyright 2021, Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This example shows how to create a Performance Max campaign.\n#\n# For more information about Performance Max campaigns, see\n# https://developers.google.com/google-ads/api/docs/performance-max/overview.\n#\n# Prerequisites:\n# - You must have at least one conversion action in the account. For\n#   more about conversion actions, see\n#   https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions.\n#\n# This example uses the default customer conversion goals. For an example of\n# setting campaign-specific conversion goals, see\n# shopping_ads/add_performance_max_retail_campaign.pl.\n\nuse strict;\nuse warnings;\nuse utf8;\n\nuse FindBin qw($Bin);\nuse lib \"$Bin/../../lib\";\nuse Google::Ads::GoogleAds::Client;\nuse Google::Ads::GoogleAds::Utils::GoogleAdsHelper;\nuse Google::Ads::GoogleAds::Utils::MediaUtils;\nuse Google::Ads::GoogleAds::V22::Resources::CampaignBudget;\nuse Google::Ads::GoogleAds::V22::Resources::Campaign;\nuse Google::Ads::GoogleAds::V22::Resources::CampaignCriterion;\nuse Google::Ads::GoogleAds::V22::Resources::CampaignAsset;\nuse Google::Ads::GoogleAds::V22::Resources::Asset;\nuse Google::Ads::GoogleAds::V22::Resources::AssetAutomationSetting;\nuse Google::Ads::GoogleAds::V22::Resources::AssetGroup;\nuse Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset;\nuse Google::Ads::GoogleAds::V22::Resources::AssetGroupSignal;\nuse Google::Ads::GoogleAds::V22::Common::MaximizeConversionValue;\nuse Google::Ads::GoogleAds::V22::Common::LocationInfo;\nuse Google::Ads::GoogleAds::V22::Common::LanguageInfo;\nuse Google::Ads::GoogleAds::V22::Common::TextAsset;\nuse Google::Ads::GoogleAds::V22::Common::ImageAsset;\nuse Google::Ads::GoogleAds::V22::Common::AudienceInfo;\nuse Google::Ads::GoogleAds::V22::Enums::BudgetDeliveryMethodEnum qw(STANDARD);\nuse Google::Ads::GoogleAds::V22::Enums::CampaignStatusEnum;\nuse Google::Ads::GoogleAds::V22::Enums::AdvertisingChannelTypeEnum\n  qw(PERFORMANCE_MAX);\nuse Google::Ads::GoogleAds::V22::Enums::AssetAutomationStatusEnum qw(OPTED_IN);\nuse Google::Ads::GoogleAds::V22::Enums::AssetAutomationTypeEnum\n  qw(GENERATE_IMAGE_EXTRACTION FINAL_URL_EXPANSION_TEXT_ASSET_AUTOMATION TEXT_ASSET_AUTOMATION GENERATE_ENHANCED_YOUTUBE_VIDEOS GENERATE_IMAGE_ENHANCEMENT);\nuse Google::Ads::GoogleAds::V22::Enums::AssetGroupStatusEnum;\nuse Google::Ads::GoogleAds::V22::Enums::AssetFieldTypeEnum\n  qw(HEADLINE DESCRIPTION LONG_HEADLINE BUSINESS_NAME LOGO MARKETING_IMAGE SQUARE_MARKETING_IMAGE);\nuse Google::Ads::GoogleAds::V22::Enums::EuPoliticalAdvertisingStatusEnum\n  qw(DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING);\nuse Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::CampaignBudgetService::CampaignBudgetOperation;\nuse Google::Ads::GoogleAds::V22::Services::CampaignService::CampaignOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::CampaignCriterionService::CampaignCriterionOperation;\nuse Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::AssetGroupService::AssetGroupOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::AssetGroupSignalService::AssetGroupSignalOperation;\nuse\n  Google::Ads::GoogleAds::V22::Services::CampaignAssetService::CampaignAssetOperation;\nuse Google::Ads::GoogleAds::V22::Utils::ResourceNames;\n\nuse Getopt::Long qw(:config auto_help);\nuse Pod::Usage;\nuse Cwd          qw(abs_path);\nuse Data::Uniqid qw(uniqid);\nuse POSIX        qw(strftime);\n\n# We specify temporary IDs that are specific to a single mutate request.\n# Temporary IDs are always negative and unique within one mutate request.\n#\n# See https://developers.google.com/google-ads/api/docs/mutating/best-practices\n# for further details.\n#\n# These temporary IDs are fixed because they are used in multiple places.\nuse constant BUDGET_TEMPORARY_ID                   => -1;\nuse constant PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID => -2;\nuse constant ASSET_GROUP_TEMPORARY_ID              => -3;\n\n# There are also entities that will be created in the same request but do not\n# need to be fixed temporary IDs because they are referenced only once.\nour $next_temp_id = ASSET_GROUP_TEMPORARY_ID - 1;\n\nsub add_performance_max_campaign {\n  my ($api_client, $customer_id, $audience_id, $brand_guidelines_enabled) = @_;\n\n  # Performance Max campaigns require that repeated assets such as headlines\n  # and descriptions be created before the campaign.\n  # For the list of required assets for a Performance Max campaign, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/assets.\n  #\n  # Create the headlines.\n  my $headline_asset_resource_names =\n    create_multiple_text_assets($api_client, $customer_id,\n    [\"Travel\", \"Travel Reviews\", \"Book travel\"]);\n  # Create the descriptions.\n  my $description_asset_resource_names =\n    create_multiple_text_assets($api_client, $customer_id,\n    [\"Take to the air!\", \"Fly to the sky!\"]);\n\n  # It's important to create the below entities in this order because they depend\n  # on each other.\n  my $operations = [];\n  # The below methods create and return MutateOperations that we later provide to\n  # the GoogleAdsService->mutate() method in order to create the entities in a\n  # single request. Since the entities for a Performance Max campaign are closely\n  # tied to one-another, it's considered a best practice to create them in a\n  # single mutate request so they all complete successfully or fail entirely,\n  # leaving no orphaned entities. See:\n  # https://developers.google.com/google-ads/api/docs/mutating/overview.\n  push @$operations, create_campaign_budget_operation($customer_id);\n  push @$operations,\n    create_performance_max_campaign_operation($customer_id,\n    $brand_guidelines_enabled);\n  push @$operations, @{create_campaign_criterion_operations($customer_id)};\n  push @$operations,\n    @{\n    create_asset_group_operations(\n      $customer_id,                      $headline_asset_resource_names,\n      $description_asset_resource_names, $brand_guidelines_enabled\n    )};\n  push @$operations,\n    @{create_asset_group_signal_operations($customer_id, $audience_id)};\n\n  # Issue a mutate request to create everything and print its information.\n  my $mutate_google_ads_response = $api_client->GoogleAdsService()->mutate({\n    customerId       => $customer_id,\n    mutateOperations => $operations\n  });\n\n  print_response_details($mutate_google_ads_response);\n\n  return 1;\n}\n\n# Creates a MutateOperation that creates a new CampaignBudget.\n#\n# A temporary ID will be assigned to this campaign budget so that it can be\n# referenced by other objects being created in the same mutate request.\nsub create_campaign_budget_operation {\n  my ($customer_id) = @_;\n\n  # Create a mutate operation that creates a campaign budget operation.\n  return\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      campaignBudgetOperation =>\n        Google::Ads::GoogleAds::V22::Services::CampaignBudgetService::CampaignBudgetOperation\n        ->new({\n          create => Google::Ads::GoogleAds::V22::Resources::CampaignBudget->new(\n            {\n              # Set a temporary ID in the budget's resource name so it can be\n              # referenced by the campaign in later steps.\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign_budget(\n                $customer_id, BUDGET_TEMPORARY_ID\n                ),\n              name => \"Performance Max campaign budget #\" . uniqid(),\n              # The budget period already defaults to DAILY.\n              amountMicros   => 50000000,\n              deliveryMethod => STANDARD,\n              # A Performance Max campaign cannot use a shared campaign budget.\n              explicitlyShared => \"false\",\n            })})});\n}\n\n# Creates a MutateOperation that creates a new Performance Max campaign.\n#\n# A temporary ID will be assigned to this campaign so that it can be referenced\n# by other objects being created in the same mutate request.\nsub create_performance_max_campaign_operation {\n  my ($customer_id, $brand_guidelines_enabled) = @_;\n  # Configures the optional opt-in/out status for asset automation settings.\n  # When we create the campaign object, we set campaign->{assetAutomationSettings}\n  # equal to $asset_automation_settings.\n  my $asset_automation_settings = [];\n  my $asset_automation_types    = [\n    GENERATE_IMAGE_EXTRACTION, FINAL_URL_EXPANSION_TEXT_ASSET_AUTOMATION,\n    TEXT_ASSET_AUTOMATION,     GENERATE_ENHANCED_YOUTUBE_VIDEOS,\n    GENERATE_IMAGE_ENHANCEMENT\n  ];\n  foreach my $asset_automation_type (@$asset_automation_types) {\n    push @$asset_automation_settings,\n      Google::Ads::GoogleAds::V22::Resources::AssetAutomationSetting->new({\n        assetAutomationStatus => OPTED_IN,\n        assetAutomationType   => $asset_automation_type\n      });\n  }\n\n  # Create a mutate operation that creates a campaign operation.\n  return\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      campaignOperation =>\n        Google::Ads::GoogleAds::V22::Services::CampaignService::CampaignOperation\n        ->new({\n          create => Google::Ads::GoogleAds::V22::Resources::Campaign->new({\n              # Assign the resource name with a temporary ID.\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                ),\n              name => \"Performance Max campaign #\" . uniqid(),\n              # Set the budget using the given budget resource name.\n              campaignBudget =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign_budget(\n                $customer_id, BUDGET_TEMPORARY_ID\n                ),\n              # Set the campaign status as PAUSED. The campaign is the only entity in\n              # the mutate request that should have its status set.\n              status =>\n                Google::Ads::GoogleAds::V22::Enums::CampaignStatusEnum::PAUSED,\n              # All Performance Max campaigns have an advertisingChannelType of\n              # PERFORMANCE_MAX. The advertisingChannelSubType should not be set.\n              advertisingChannelType => PERFORMANCE_MAX,\n\n              # Bidding strategy must be set directly on the campaign.\n              # Setting a portfolio bidding strategy by resource name is not supported.\n              # Max Conversion and Maximize Conversion Value are the only strategies\n              # supported for Performance Max campaigns.\n              # An optional ROAS (Return on Advertising Spend) can be set for\n              # maximizeConversionValue. The ROAS value must be specified as a ratio in\n              # the API. It is calculated by dividing \"total value\" by \"total spend\".\n              # For more information on Maximize Conversion Value, see the support\n              # article: http://support.google.com/google-ads/answer/7684216.\n              # A targetRoas of 3.5 corresponds to a 350% return on ad spend.\n              maximizeConversionValue =>\n                Google::Ads::GoogleAds::V22::Common::MaximizeConversionValue->\n                new({\n                  targetRoas => 3.5\n                }\n                ),\n\n              # Set if the campaign is enabled for brand guidelines. For more information\n              # on brand guidelines, see https://support.google.com/google-ads/answer/14934472.\n              brandGuidelinesEnabled => $brand_guidelines_enabled,\n\n              # Configures the optional opt-in/out status for asset automation settings.\n              assetAutomationSettings => $asset_automation_settings,\n\n              # Optional fields.\n              startDate => strftime(\"%Y%m%d\", localtime(time + 60 * 60 * 24)),\n              endDate   =>\n                strftime(\"%Y%m%d\", localtime(time + 60 * 60 * 24 * 365)),\n\n              # Declare whether or not this campaign serves political ads targeting the EU.\n              # Valid values are CONTAINS_EU_POLITICAL_ADVERTISING and\n              # DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING.\n              containsEuPoliticalAdvertising =>\n                DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING\n            })})});\n}\n\n# Creates a list of MutateOperations that create new campaign criteria.\nsub create_campaign_criterion_operations {\n  my ($customer_id) = @_;\n\n  my $operations = [];\n  # Set the LOCATION campaign criteria.\n  # Target all of New York City except Brooklyn.\n  # Location IDs are listed here:\n  # https://developers.google.com/google-ads/api/reference/data/geotargets\n  # and they can also be retrieved using the GeoTargetConstantService as shown\n  # here: https://developers.google.com/google-ads/api/docs/targeting/location-targeting.\n  #\n  # We will add one positive location target for New York City (ID=1023191)\n  # and one negative location target for Brooklyn (ID=1022762).\n  # First, add the positive (negative = false) for New York City.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      campaignCriterionOperation =>\n        Google::Ads::GoogleAds::V22::Services::CampaignCriterionService::CampaignCriterionOperation\n        ->new({\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::CampaignCriterion->new({\n              campaign =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                ),\n              location =>\n                Google::Ads::GoogleAds::V22::Common::LocationInfo->new({\n                  geoTargetConstant =>\n                    Google::Ads::GoogleAds::V22::Utils::ResourceNames::geo_target_constant(\n                    1023191)}\n                ),\n              negative => \"false\"\n            })})});\n\n  # Next add the negative target for Brooklyn.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      campaignCriterionOperation =>\n        Google::Ads::GoogleAds::V22::Services::CampaignCriterionService::CampaignCriterionOperation\n        ->new({\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::CampaignCriterion->new({\n              campaign =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                ),\n              location =>\n                Google::Ads::GoogleAds::V22::Common::LocationInfo->new({\n                  geoTargetConstant =>\n                    Google::Ads::GoogleAds::V22::Utils::ResourceNames::geo_target_constant(\n                    1022762)}\n                ),\n              negative => \"true\"\n            })})});\n\n  # Set the LANGUAGE campaign criterion.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      campaignCriterionOperation =>\n        Google::Ads::GoogleAds::V22::Services::CampaignCriterionService::CampaignCriterionOperation\n        ->new({\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::CampaignCriterion->new({\n              campaign =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                ),\n              # Set the language.\n              # For a list of all language codes, see:\n              # https://developers.google.com/google-ads/api/reference/data/codes-formats#expandable-7.\n              language =>\n                Google::Ads::GoogleAds::V22::Common::LanguageInfo->new({\n                  languageConstant =>\n                    Google::Ads::GoogleAds::V22::Utils::ResourceNames::language_constant(\n                    1000)    # English\n                })})})});\n\n  return $operations;\n}\n\n# Creates multiple text assets and returns the list of resource names.\nsub create_multiple_text_assets {\n  my ($api_client, $customer_id, $texts) = @_;\n\n  # Here again we use the GoogleAdService to create multiple text assets in a\n  # single request.\n  my $operations = [];\n  foreach my $text (@$texts) {\n    # Create a mutate operation for a text asset.\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        assetOperation =>\n          Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation->\n          new({\n            create => Google::Ads::GoogleAds::V22::Resources::Asset->new({\n                textAsset =>\n                  Google::Ads::GoogleAds::V22::Common::TextAsset->new({\n                    text => $text\n                  })})})});\n  }\n\n  # Issue a mutate request to add all assets.\n  my $mutate_google_ads_response = $api_client->GoogleAdsService()->mutate({\n    customerId       => $customer_id,\n    mutateOperations => $operations\n  });\n\n  my $asset_resource_names = [];\n  foreach\n    my $response (@{$mutate_google_ads_response->{mutateOperationResponses}})\n  {\n    push @$asset_resource_names, $response->{assetResult}{resourceName};\n  }\n  print_response_details($mutate_google_ads_response);\n\n  return $asset_resource_names;\n}\n\n# Creates a list of MutateOperations that create a new asset group.\n#\n# A temporary ID will be assigned to this asset group so that it can be referenced\n# by other objects being created in the same mutate request.\nsub create_asset_group_operations {\n  my (\n    $customer_id,\n    $headline_asset_resource_names,\n    $description_asset_resource_names,\n    $brand_guidelines_enabled\n  ) = @_;\n\n  my $operations = [];\n  # Create a mutate operation that creates an asset group operation.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetGroupOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetGroupService::AssetGroupOperation\n        ->new({\n          create => Google::Ads::GoogleAds::V22::Resources::AssetGroup->new({\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                $customer_id, ASSET_GROUP_TEMPORARY_ID\n                ),\n              name     => \"Performance Max asset group #\" . uniqid(),\n              campaign =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                ),\n              finalUrls       => [\"http://www.example.com\"],\n              finalMobileUrls => [\"http://www.example.com\"],\n              status          =>\n                Google::Ads::GoogleAds::V22::Enums::AssetGroupStatusEnum::PAUSED\n            })})});\n\n  # For the list of required assets for a Performance Max campaign, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/assets.\n\n  # An AssetGroup is linked to an Asset by creating a new AssetGroupAsset\n  # and providing:\n  # - the resource name of the AssetGroup\n  # - the resource name of the Asset\n  # - the fieldType of the Asset in this AssetGroup\n  #\n  # To learn more about AssetGroups, see\n  # https://developers.google.com/google-ads/api/docs/performance-max/asset-groups.\n\n  # Link the previously created multiple text assets.\n\n  # Link the headline assets.\n  foreach my $resource_name (@$headline_asset_resource_names) {\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        assetGroupAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n                asset      => $resource_name,\n                assetGroup =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                  $customer_id, ASSET_GROUP_TEMPORARY_ID\n                  ),\n                fieldType => HEADLINE\n              })})});\n  }\n\n  # Link the description assets.\n  foreach my $resource_name (@$description_asset_resource_names) {\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        assetGroupAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n                asset      => $resource_name,\n                assetGroup =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                  $customer_id, ASSET_GROUP_TEMPORARY_ID\n                  ),\n                fieldType => DESCRIPTION\n              })})});\n  }\n\n  # Create and link the long headline text asset.\n  push @$operations,\n    @{create_and_link_text_asset($customer_id, \"Travel the World\",\n      LONG_HEADLINE)};\n\n  # Create and link the business name and logo asset.\n  push @$operations,\n    @{\n    create_and_link_brand_assets(\n      $customer_id,             $brand_guidelines_enabled,\n      \"Interplanetary Cruises\", \"https://gaagl.page.link/bjYi\",\n      \"Marketing Logo\"\n    )};\n\n  # Create and link the image assets.\n\n  # Create and link the marketing image asset.\n  push @$operations,\n    @{\n    create_and_link_image_asset(\n      $customer_id,    \"https://gaagl.page.link/Eit5\",\n      MARKETING_IMAGE, \"Marketing Image\"\n    )};\n\n  # Create and link the square marketing image asset.\n  push @$operations,\n    @{\n    create_and_link_image_asset(\n      $customer_id,           \"https://gaagl.page.link/bjYi\",\n      SQUARE_MARKETING_IMAGE, \"Square Marketing Image\"\n    )};\n\n  return $operations;\n}\n\n# Creates a list of MutateOperations that create a new linked text asset.\nsub create_and_link_text_asset {\n  my ($customer_id, $text, $field_type) = @_;\n\n  my $operations = [];\n  # Create a new mutate operation for a text asset.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation->\n        new({\n          create => Google::Ads::GoogleAds::V22::Resources::Asset->new({\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $next_temp_id\n                ),\n              textAsset => Google::Ads::GoogleAds::V22::Common::TextAsset->new({\n                  text => $text\n                })})})});\n\n  # Create an asset group asset to link the asset to the asset group.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetGroupAssetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n        ->new({\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n              asset => Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $next_temp_id\n              ),\n              assetGroup =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                $customer_id, ASSET_GROUP_TEMPORARY_ID\n                ),\n              fieldType => $field_type\n            })})});\n\n  $next_temp_id--;\n  return $operations;\n}\n\n# Creates a list of MutateOperations that create a new linked image asset.\nsub create_and_link_image_asset {\n  my ($customer_id, $url, $field_type, $asset_name) = @_;\n\n  my $operations = [];\n  # Create a new mutate operation for an image asset.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation->\n        new({\n          create => Google::Ads::GoogleAds::V22::Resources::Asset->new({\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $next_temp_id\n                ),\n              # Provide a unique friendly name to identify your asset.\n              # When there is an existing image asset with the same content but a different\n              # name, the new name will be dropped silently.\n              name       => $asset_name,\n              imageAsset =>\n                Google::Ads::GoogleAds::V22::Common::ImageAsset->new({\n                  data => get_base64_data_from_url($url)})})})});\n\n  # Create an asset group asset to link the asset to the asset group.\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetGroupAssetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n        ->new({\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n              asset => Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $next_temp_id\n              ),\n              assetGroup =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                $customer_id, ASSET_GROUP_TEMPORARY_ID\n                ),\n              fieldType => $field_type\n            })})});\n\n  $next_temp_id--;\n  return $operations;\n}\n\n# Creates a list of MutateOperations that create linked brand assets.\nsub create_and_link_brand_assets {\n  my ($customer_id, $brand_guidelines_enabled, $business_name, $logo_url,\n    $logo_name)\n    = @_;\n\n  my $operations = [];\n\n  # Create the text asset.\n  my $text_asset_temp_id = $next_temp_id--;\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation->\n        new({\n          create => Google::Ads::GoogleAds::V22::Resources::Asset->new({\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $text_asset_temp_id\n                ),\n              textAsset => Google::Ads::GoogleAds::V22::Common::TextAsset->new({\n                  text => $business_name\n                })})})});\n\n  # Create the image asset.\n  my $image_asset_temp_id = $next_temp_id--;\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetService::AssetOperation->\n        new({\n          create => Google::Ads::GoogleAds::V22::Resources::Asset->new({\n              resourceName =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                $customer_id, $image_asset_temp_id\n                ),\n              # Provide a unique friendly name to identify your asset.\n              # When there is an existing image asset with the same content but a different\n              # name, the new name will be dropped silently.\n              name       => $logo_name,\n              imageAsset =>\n                Google::Ads::GoogleAds::V22::Common::ImageAsset->new({\n                  data => get_base64_data_from_url($logo_url)})})})});\n\n  if ($brand_guidelines_enabled) {\n    # Create CampaignAsset resources to link the Asset resources to the Campaign.\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        campaignAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::CampaignAssetService::CampaignAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::CampaignAsset->new({\n                fieldType => BUSINESS_NAME,\n                campaign  =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                  $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                  ),\n                asset =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                  $customer_id, $text_asset_temp_id\n                  )})})});\n\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        campaignAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::CampaignAssetService::CampaignAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::CampaignAsset->new({\n                fieldType => LOGO,\n                campaign  =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::campaign(\n                  $customer_id, PERFORMANCE_MAX_CAMPAIGN_TEMPORARY_ID\n                  ),\n                asset =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                  $customer_id, $image_asset_temp_id\n                  )})})});\n  } else {\n    # Create AssetGroupAsset resources to link the Asset resources to the AssetGroup.\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        assetGroupAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n                asset =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                  $customer_id, $text_asset_temp_id\n                  ),\n                assetGroup =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                  $customer_id, ASSET_GROUP_TEMPORARY_ID\n                  ),\n                fieldType => BUSINESS_NAME\n              })})});\n\n    push @$operations,\n      Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation\n      ->new({\n        assetGroupAssetOperation =>\n          Google::Ads::GoogleAds::V22::Services::AssetGroupAssetService::AssetGroupAssetOperation\n          ->new({\n            create =>\n              Google::Ads::GoogleAds::V22::Resources::AssetGroupAsset->new({\n                asset =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset(\n                  $customer_id, $image_asset_temp_id\n                  ),\n                assetGroup =>\n                  Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                  $customer_id, ASSET_GROUP_TEMPORARY_ID\n                  ),\n                fieldType => LOGO\n              })})});\n  }\n\n  return $operations;\n}\n\n# Creates a list of MutateOperations that create asset group signals.\nsub create_asset_group_signal_operations {\n  my ($customer_id, $audience_id) = @_;\n\n  my $operations = [];\n  return $operations if not defined $audience_id;\n\n  push @$operations,\n    Google::Ads::GoogleAds::V22::Services::GoogleAdsService::MutateOperation->\n    new({\n      assetGroupSignalOperation =>\n        Google::Ads::GoogleAds::V22::Services::AssetGroupSignalService::AssetGroupSignalOperation\n        ->new({\n          # To learn more about Audience Signals, see:\n          # https://developers.google.com/google-ads/api/docs/performance-max/asset-groups#audience_signals\n          create =>\n            Google::Ads::GoogleAds::V22::Resources::AssetGroupSignal->new({\n              assetGroup =>\n                Google::Ads::GoogleAds::V22::Utils::ResourceNames::asset_group(\n                $customer_id, ASSET_GROUP_TEMPORARY_ID\n                ),\n              audience =>\n                Google::Ads::GoogleAds::V22::Common::AudienceInfo->new({\n                  audience =>\n                    Google::Ads::GoogleAds::V22::Utils::ResourceNames::audience(\n                    $customer_id, $audience_id\n                    )})})})});\n  return $operations;\n}\n\n# Prints the details of a MutateGoogleAdsResponse.\n# Parses the \"response\" oneof field name and uses it to extract the new entity's\n# name and resource name.\nsub print_response_details {\n  my ($mutate_google_ads_response) = @_;\n\n  foreach\n    my $response (@{$mutate_google_ads_response->{mutateOperationResponses}})\n  {\n    my $result_type = [keys %$response]->[0];\n\n    printf \"Created a(n) %s with '%s'.\\n\",\n      ucfirst $result_type =~ s/Result$//r,\n      $response->{$result_type}{resourceName};\n  }\n}\n\n# Don't run the example if the file is being included.\nif (abs_path($0) ne abs_path(__FILE__)) {\n  return 1;\n}\n\n# Get Google Ads Client, credentials will be read from ~/googleads.properties.\nmy $api_client = Google::Ads::GoogleAds::Client->new();\n\n# By default examples are set to die on any server returned fault.\n$api_client->set_die_on_faults(1);\n\nmy $customer_id              = undef;\nmy $audience_id              = undef;\nmy $brand_guidelines_enabled = \"true\";\n\n# Parameters passed on the command line will override any parameters set in code.\nGetOptions(\n  \"customer_id=s\"              => \\$customer_id,\n  \"audience_id=i\"              => \\$audience_id,\n  \"brand_guidelines_enabled=s\" => \\$brand_guidelines_enabled\n);\n\n# Print the help message if the parameters are not initialized in the code nor\n# in the command line.\npod2usage(2) if not check_params($customer_id);\n\n# Call the example.\nadd_performance_max_campaign(\n  $api_client,  $customer_id =~ s/-//gr,\n  $audience_id, $brand_guidelines_enabled\n);\n\n=pod\n\n=head1 NAME\n\nadd_performance_max_campaign\n\n=head1 DESCRIPTION\n\nThis example shows how to create a Performance Max campaign.\n\nFor more information about Performance Max campaigns, see\nhttps://developers.google.com/google-ads/api/docs/performance-max/overview.\n\nPrerequisites:\n- You must have at least one conversion action in the account. For\n  more about conversion actions, see\n  https://developers.google.com/google-ads/api/docs/conversions/overview#conversion_actions.\n\nThis example uses the default customer conversion goals. For an example of\nsetting campaign-specific conversion goals, see\nshopping_ads/add_performance_max_retail_campaign.pl.\n\n=head1 SYNOPSIS\n\nadd_performance_max_campaign.pl [options]\n\n    -help                       Show the help message.\n    -customer_id                The Google Ads customer ID.\n    -audience_id                [optional] An audience ID to use to improve the\n                                targeting of the Performance Max campaign.\n    -brand_guidelines_enabled\t[optional] A boolean value indicating if the campaign is enabled for brand guidelines. Defaults to false.\n\n=cut\nadd_performance_max_campaign.pl"
  ],
  "tables": [],
  "mainText": "To discuss and provide feedback on our products, join the official Google Ads Discord channel in the Google Advertising and Measurement Community server.\n        \n      \n    \n  \n  \n  \n\n  \n    \n    \n    \n  \n  \n    \n    \n    \n      \n  \n    \n        Home\n      \n  \n  \n    \n  \n  \n  \n    \n      \n      \n    \n    \n    \n      \n  \n    \n        Products\n      \n  \n  \n    \n  \n  \n  \n    \n      \n      \n    \n    \n    \n      \n  \n    \n        Google Ads API\n      \n  \n  \n    \n  \n  \n  \n    \n      \n      \n    \n    \n    \n      \n  \n    \n        Google Ads API\n      \n  \n  \n    \n  \n  \n  \n    \n      \n      \n    \n    \n    \n      \n  \n    \n        Libraries and samples\n      \n  \n  \n    \n  \n  \n\n    \n      \n    \n    \n  \n    \n  \n  \n    \n      Add Performance Max Campaign\n\n    \n    \n      \n    \n\n    \n      \n      Stay organized with collections\n    \n    \n      \n      Save and categorize content based on your preferences.\n    \n  \n    \n  \n      \n    \n  \n  \n\n  \n  \n  \n    \n    \n    \n  \n\n  \n    \n      \n  \n    \n    \n    \n    AI-generated Key Takeaways\n    \n  \n  \n    \n      \n        outlined_flag\n      \n    \n    \n      \n        \n          The document provides code examples in Java, C#, and PHP for creating a Performance Max campaign using the Google Ads API.\n\n        \n      \n        \n          The examples demonstrate how to set up temporary IDs, create a campaign budget, create the Performance Max campaign itself with specific settings, define campaign criteria, create and link various assets, create and link asset group signals, perform all these mutations in a single request, and process the response.\n\n        \n      \n        \n          Temporary IDs are crucial for referencing entities within a single mutate request and ensure that related entities are created successfully together or fail together.\n\n        \n      \n        \n          The examples cover the creation of various components including Campaign Budget, Performance Max Campaign, Campaign Criteria, Asset Group, Asset Group Assets, Campaign Assets, and Asset Group Signals.\n\n        \n      \n    \n  \n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n    \n  \n  \n  \n  \n  \n  \n\n  \n  \n    \n    \n    \n      \n      \n        \n      \n        \n      \n    \n      \n        \n      \n      \n        \n      \n        \n      \n        \n      \n        \n      \n    \n    \n      \n      \n      \n        \n          \n        \n        \n      \n        \n          \n        \n        \n      \n      \n    \n  \n\n  \n  \n\n  \n  \n    \n    \n  \n\n  \n  \n  \n\n  \n  \n\n  Java\n  \n  \n    \n      \n        // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.ads.googleads.examples.advancedoperations;\n\nimport static com.google.ads.googleads.examples.utils.CodeSampleHelper.getPrintableDateTime;\nimport static com.google.ads.googleads.v22.enums.EuPoliticalAdvertisingStatusEnum.EuPoliticalAdvertisingStatus.DOES_NOT_CONTAIN_EU_POLITICAL_ADVERTISING;\n\nimport com.beust.jcommander.Parameter;\nimport com.google.ads.googleads.examples.utils.ArgumentNames;\nimport com.google.ads.googleads.examples.utils.CodeSampleParams;\nimport com.google.ads.googleads.lib.GoogleAdsClient;\nimport com.google.ads.googleads.v22.common.AudienceInfo;\nimport com.google.ads.googleads.v22.common.ImageAsset;\nimport com.google.ads.googleads.v22.common.LanguageInfo;\nimport com.google.ads.googleads.v22.common.LocationInfo;\nimport com.google.ads.googleads.v22.common.MaximizeConversionValue;\nimport com.google.ads.googleads.v22.common.SearchThemeInfo;\nimport com.google.ads.googleads.v22.common.TextAsset;\nimport com.google.ads.googleads.v22.enums.AdvertisingChannelTypeEnum.AdvertisingChannelType;\nimport com.google.ads.googleads.v22.enums.AssetAutomationStatusEnum.AssetAutomationStatus;\nimport com.google.ads.googleads.v22.enums.AssetAutomationTypeEnum.AssetAutomationType;\nimport com.google.ads.googleads.v22.enums.AssetFieldTypeEnum.AssetFieldType;\nimport com.google.ads.googleads.v22.enums.AssetGroupStatusEnum.AssetGroupStatus;\nimport com.google.ads.googleads.v22.enums.BudgetDeliveryMethodEnum.BudgetDeliveryMethod;\nimport com.google.ads.googleads.v22.enums.CampaignStatusEnum.CampaignStatus;\nimport com.google.ads.googleads.v22.errors.GoogleAdsError;\nimport com.google.ads.googleads.v22.errors.GoogleAdsException;\nimport com.google.ads.googleads.v22.resources.Asset;\nimport com.google.ads.googleads.v22.resources.AssetGroup;\nimport com.google.ads.googleads.v22.resources.AssetGroupAsset;\nimport com.google",
  "fetchedAt": "2025-10-30T08:43:12.094Z"
}